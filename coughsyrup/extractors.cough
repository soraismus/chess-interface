define (['mydash', 'constants', 'types', 'assertions'], (_, c, y, v) ->

  # -----------------
  # Helper Functions
  # -----------------

  to-1d = \pos ->
    # Start testing mode.
    v.vow-position pos
    # End testing mode.

    rank = rank-of pos
    file = file-of pos
    8 * rank + file

  # No assertions b/c #opponent-mated? encounters indices < 0 or > 63.
  to-2d = \idx -> [_.floor (idx / 8), idx % 8]

  corresponding-black-chessman = \chessman ->
    # Start testing mode.
    v.vow-chessman chessman
    # End testing mode.
    if (_.isUC chessman) then (_.toLC chessman) else chessman

  of-color? = \color \square ->
    # Start testing mode.
    v.vow-color color
    v.vow-square square
    # End testing mode.

    color == color-of square

  # -----------
  # Extractors
  # -----------

  chessman-positions-from = (board, color) ->
    # Start testing mode.
    v.vow-board board
    v.vow-color color
    # End testing mode.

    i = -1
    split-board = board.split ''
    positions = []

    get-pos = \color ->
      color-pred = of-color? color

      \sq ->
        i += 1
        positions.push (to-2d i) if color-pred sq

    _.each (get-pos color) split-board

    positions

  chessman-type-at = \board \pos ->
    # Start testing mode.
    v.vow-board board
    v.vow-position pos
    # End testing mode.
    chessman-type-of (square-at board pos)

  chessman-type-of = \chessman ->
    # Start testing mode.
    v.vow-chessman chessman
    # End testing mode.

    abbrev  = corresponding-black-chessman chessman
    type-of = _.zipAssign c.black-chessmen c.chessman-types

    type-of[abbrev]

  color-at = \board \pos ->
    # Start testing mode.
    v.vow-board board
    v.vow-position pos
    # End testing mode.
    color-of (square-at board pos)

  color-of = \square ->
    # Start testing mode.
    v.vow-square square
    # End testing mode.
    _.switchWith c.absent-color [_.isLC, _.isUC] [c.black, c.white] square

  colors-at = \board \positions ->
    # Start testing mode.
    v.vow-board board
    v.vow-all-positions positions
    # End testing mode.
    _.map (color-at board) positions

  file-of = \val ->
    # Start testing mode.
    _.vowStruct [y.position?, y.setting?] val
    # End testing mode.

    evaluators = [
      ([rank, file])          -> file
      ([board, [rank, file]]) -> file
    ]

    _.switch [y.position?, y.setting?] evaluators val

  rank-&-file-from = \val ->
    # Start testing mode.
    v.vow-integral-pair val
    # End testing mode.

    val

  rank-of = \val ->
    # Start testing mode.
    _.vowStruct [y.position?, y.setting?] val
    # End testing mode.

    evaluators = [
      ([rank, file])          -> rank
      ([board, [rank, file]]) -> rank
    ]

    _.switch [y.position?, y.setting?] evaluators val

  square-at = \board \pos ->
    # Start testing mode.
    v.vow-board board
    v.vow-position pos
    # End testing mode.
    _.charAt (to-1d pos) board

  return {
    chessman-positions-from
    chessman-type-at
    chessman-type-of
    corresponding-black-chessman
    color-at
    color-of
    colors-at
    file-of
    rank-&-file-from
    rank-of
    square-at
    to-1d
    to-2d
  }

)
