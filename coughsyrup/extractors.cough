define (['mydash', 'constants', 'types', 'assertions'], (_, c, y, v) ->

  # -----------------
  # Helper Functions
  # -----------------

  split-&-indexify = \str ->
    array = _.split '' str

    i = -1

    indexify = \component ->
      i += 1
      [component, i]

    _.map indexify array

  to-1d = \pos ->
    # Start testing mode.
    v.vow-position pos
    # End testing mode.

    rank = rank-of pos
    file = file-of pos
    8 * rank + file

  corresponding-black-chessman = \chessman ->
    # Start testing mode.
    v.vow-chessman chessman
    # End testing mode.
    if (_.isUC chessman) then (_.toLC chessman) else chessman

  # -----------
  # Extractors
  # -----------

  board-from = \val ->
    # Start testing mode.
    _.vowStruct [y.setting?, y.map?, y.chart?, y.chart2?] val
    # End testing mode.

    evaluators = [
      ([board, pos])      -> board
      ([board, path])     -> board
      ([{ board }, path]) -> board
      ({ board })         -> board
    ]

    _.switch [y.setting?, y.map?, y.chart?, y.chart2?] evaluators val

  castling-rights-from = \val ->
    # Start testing mode.
    _.vowStruct [y.chart?, y.chart2?] val
    # End testing mode.

    evaluators = [
      ([{ castlingRights }]) -> castlingRights
      ({ castlingRights })   -> castlingRights
    ]

    _.switch [y.chart?, y.chart2?] evaluators val

  chessmen-from = (board, color) ->
    squares = split-&-indexify (-1) board
    color-predicate = ([sq, idx]) -> of-color? color sq
    chessmen-of-specified-color = _.filter color-predicate squares

  chessman-type-at = \board \pos ->
    # Start testing mode.
    v.vow-board board
    v.vow-position pos
    # End testing mode.
    chessman-type-of (square-at board pos)

  chessman-type-of = \chessman ->
    # Start testing mode.
    v.vow-chessman chessman
    # End testing mode.

    abbrev  = corresponding-black-chessman chessman
    type-of = _.zipAssign c.black-chessmen c.chessman-types

    type-of[abbrev]

  chessman-type-from = \chart2 ->
    # Start testing mode.
    v.vow-chart2 chart2
    # End testing mode.
    chessman-type-at (board-from chart2) (position-from chart2)

  color-at = \board \pos ->
    # Start testing mode.
    v.vow-board board
    v.vow-position pos
    # End testing mode.
    color-of (square-at board pos)

  color-of = \square ->
    # Start testing mode.
    v.vow-square square
    # End testing mode.
    _.switchWith c.absent-color [_.isLC, _.isUC] [c.black, c.white] square

  colors-at = \board \positions ->
    # Start testing mode.
    v.vow-board board
    v.vow-all-positions positions
    # End testing mode.
    _.map (color-at board) positions

  file-of = \val ->
    # Start testing mode.
    _.vowStruct [y.position?, y.setting?] val
    # End testing mode.

    evaluators = [
      ([rank, file])          -> file
      ([board, [rank, file]]) -> file
    ]

    _.switch [y.position?, y.setting?] evaluators val

  # Not possible for the type 'chart2'.
  map-from = \chart ->
    # Start testing mode.
    v.vow-chart chart
    # End testing mode.
    [{ board }, path] = chart
    [board, path]

  # Not possible for the type 'chart2'.
  path-from = \val ->
    # Start testing mode.
    _.vowStruct [y.map?, y.chart?] val
    # End testing mode.
    val[1]

  passant-from = \val ->
    # Start testing mode.
    _.vowStruct [y.chart?, y.chart2?] val
    # End testing mode.

    evaluators = [
      ([{ passantPosition }]) -> passantPosition
      ({ passantPosition })   -> passantPosition
    ]

    _.switch [y.chart?, y.chart2?] evaluators val

  position-from = \val ->
    # Start testing mode.
    _.vowStruct [y.setting?, y.map?, y.chart2?] val
    # End testing mode.

    evaluators = [
      ([board, pos])        -> pos
      ([board, [tgt, src]]) -> src
      ({ source })          -> source
    ]

    _.switch [y.setting?, y.map?, y.chart2?] evaluators val

  rank-&-file-from = \val ->
    # Start testing mode.
    _.vowStruct [y.position?, y.integral-pair?, y.setting?, y.chart2?] val
    # End testing mode.

    types = [y.position?, y.integral-pair?, y.setting?, y.chart2?]

    evaluators = [
      _.identity
      _.identity
      _.second
      ({ source }) -> source
    ]

    _.switch types evaluators val

  rank-of = \val ->
    # Start testing mode.
    _.vowStruct [y.position?, y.setting?] val
    # End testing mode.

    evaluators = [
      ([rank, file])          -> rank
      ([board, [rank, file]]) -> rank
    ]

    _.switch [y.position?, y.setting?] evaluators val

  square-at = \board \pos ->
    # Start testing mode.
    v.vow-board board
    v.vow-position pos
    # End testing mode
    _.charAt (to-1d pos) board

  src-from = \val ->
    # Start testing mode.
    _.vowStruct [y.path?, y.map?, y.chart?, y.chart2?] val
    # End testing mode.

    evaluators = [
      ([tgt, src])              -> src
      ([board, [tgt, src]])     -> src
      ([{ board }, [tgt, src]]) -> src
      ({ source })              -> source
    ]

    _.switch [y.path?, y.map?, y.chart?, y.chart?] evaluators val

  src-setting-from = \val ->
    # Start testing mode.
    _.vowStruct [y.map?, y.chart?, y.chart2?] val
    # End testing mode.

    evaluators = [
      ([board, [tgt, src]])     -> [board, src]
      ([{ board }, [tgt, src]]) -> [board, src]
      ({ board, source})        -> g.generate-setting (board, source)
    ]

    _.switch [y.map?, y.chart?, y.chart?] evaluators val

  # Not possible for the type 'chart2'.
  tgt-from = \val ->
    # Start testing mode.
    _.vowStruct [y.path?, y.map?, y.chart?] val
    # End testing mode.

    evaluators = [
      ([tgt, src])              -> tgt
      ([board, [tgt, src]])     -> tgt
      ([{ board }, [tgt, src]]) -> tgt
    ]

    _.switch [y.path?, y.map?, y.chart?] evaluators val

  # Not possible for the type 'chart2'.
  tgt-setting-from = \val ->
    # Start testing mode.
    _.vowStruct [y.map?, y.chart?] val
    # End testing mode.

    evaluators = [
      ([board, [tgt, src]])     -> [board, tgt]
      ([{ board }, [tgt, src]]) -> [board, tgt]
    ]

    _.switch [y.map?, y.chart?] evaluators val

  return {
    board-from
    castling-rights-from
    chessman-type-at
    chessman-type-of
    chessman-type-from
    corresponding-black-chessman
    color-at
    color-of
    colors-at
    file-of
    map-from
    chessmen-from
    path-from
    passant-from
    position-from
    rank-&-file-from
    rank-of
    split-&-indexify
    square-at
    src-from
    src-setting-from
    tgt-from
    tgt-setting-from
    to-1d
  }

)
