define ([
  'base-helpers'
  'extractors'
  'utilities'
  'constructors'
  'piece'
  'assertions'
], (_, x, u, g, piece-fns, v) ->

  getPotentialMoves = (bd, src, rts, passant, type, attackable?) ->
    # Start testing mode.
    v.vow-board bd
    v.vow-position src
    v.vow-chessman-type type
    # End testing mode.

    moves            = []
    rank-&-file-from = x.rank-&-file-from
    [rank, file]     = rank-&-file-from src
    offsets          = u.offsets-for type
    inessent?        = u.inessent?
    gen-pos!         = g.generate-position!
    available?       = u.available? (bd, src)

    for dir in offsets
      [rank-diff, file-diff] = rank-&-file-from dir

      new-rank = rank + rank-diff
      new-file = file + file-diff

      tgt = gen-pos! (new-rank, new-file)

      moves.push tgt if inessent? tgt && available? tgt

    moves

  public-fns = _.defaults piece-fns { getPotentialMoves }

  return public-fns

)
