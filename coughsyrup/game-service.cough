define ([
  'mydash'
  'constants'
  'utilities'
  'extractors'
  'slider'
  'king'
  'rook'
  'knight'
  'pawn'
  'assertions'
], (_, c, u, x, slider-fns, king-fns, rook-fns, knight-fns, pawn-fns, v) ->

  dispatch-table = {}
  dispatch-table[c.king  ] = king-fns
  dispatch-table[c.queen ] = slider-fns
  dispatch-table[c.rook  ] = rook-fns
  dispatch-table[c.bishop] = slider-fns
  dispatch-table[c.knight] = knight-fns
  dispatch-table[c.pawn  ] = pawn-fns

  call = \fn-name \chessman-type ->
    # Start testing mode.
    _.vowStr fn-name
    v.vow-chessman-type chessman-type
    # End testing mode.

    dispatch-table[chessman-type][fn-name]

  gen-temp-chart2 = (board, rts, passant) -> (pos) ->
    g.generate-chart2
      board  : bd
      source : pos
      castlingRights  : rts
      passantPosition : passant

  checkmate? = (chart2, color) ->

  contains = (potential-positions, tgt) ->
    _.any (u.same-position? tgt) potential-positions

  getPotentialKingAttacks = \board \src ->
    # Start testing mode.
    v.vow-board board
    v.vow-position src
    # End testing mode.

    chessman-type = x.chessman-type-at board src
    call 'getPotentialKingAttacks' chessman-type board src

  getPotentialMoves = (chessman-type, chart2) ->
    # Start testing mode.
    v.vow-chessman-type chessman-type
    v.vow-chart2 chart2
    # End testing mode.

    call 'getPotentialMoves' chessman-type (chart2, chessman-type)

  in-check? = (board, color) ->
    # Start testing mode.
    v.vow-board board
    v.vow-color color
    # End testing mode.

    king-pos = king-position-for (board, color)
    vuln-positions = vulnerable-positions-for (board, color)
    contains (vuln-positions, king-pos)

  king-position-for = (board, color) ->
    # Start testing mode.
    v.vow-board board
    v.vow-color color
    # End testing mode.

    king = if u.black? color then c.black-king else c.white-king
    u.to-2d (_.indexOf board king)

  modifyCastlingRights = \chart2 ->
    # Start testing mode.
    v.vow-chart2 chart2
    # End testing mode.

    chessman-type = x.chessman-type-from chart2
    call 'modifyCastlingRights' chessman-type chart2

  move = \chart2 \tgt ->
    # Start testing mode.
    v.vow-chart2 chart2
    v.vow-position tgt
    # End testing mode.

    chessman-type = x.chessman-type-from chart2
    call 'move' chessman-type chart2 tgt

  move-legal? = (chart2, tgt) ->
    # Start testing mode.
    v.vow-chart2 chart2
    v.vow-position tgt
    # End testing mode.

    chessman-type  = x.chessman-type-from chart2
    potential-tgts = getPotentialMoves (chessman-type, chart2)
    
    contains (potential-tgts, tgt)

  query-game-service = \chart2 \tgt ->
    # Start testing mode.
    v.vow-chart2 chart2
    v.vow-position tgt
    # End testing mode.

  setPassantPosition = (chart2, tgt) ->
    # Start testing mode.
    v.vow-chart2 chart2
    v.vow-position tgt
    # End testing mode.

    chessman-type = x.chessman-type-from chart2
    call 'setPassantPosition' chessman-type (chart2, tgt)

  setPromotionPosition = (chart2, tgt) ->
    # Start testing mode.
    v.vow-chart2 chart2
    v.vow-position tgt
    # End testing mode.

    chessman-type = x.chessman-type-from chart2
    call 'setPromotionPosition' chessman-type (chart2, tgt)

  vulnerable-positions-for = (board, color) ->
    # Start testing mode.
    v.vow-board board
    v.vow-color color
    # End testing mode.

    foe-color     = u.opposing-color (color)
    foe-positions = x.chessman-positions-from (board, foe-color)

    _.meld (_.map (getPotentialKingAttacks board) foe-positions)

  # Start testing mode.

  test-mode = {
    call
    getPotentialKingAttacks
    getPotentialMoves
    in-check?
    king-position-for
    modifyCastlingRights
    move
    move-legal?
    query-game-service
    setPassantPosition
    setPromotionPosition
    vulnerable-positions-for
  }

  return test-mode

  # End testing mode.

  # Start production mode.
  # return { query-game-service }
  # End production mode.

)
