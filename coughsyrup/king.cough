define ([
  'mydash'
  'constants'
  'constructors'
  'extractors'
  'utilities'
  'stepper'
  'assertions'
], (_, c, g, x, u, stepper-fns, v) ->

  KQ = 'KQ'
  kq = 'kq'
  K  = 'K'
  Q  = 'Q'
  k  = 'k'
  q  = 'q'
  NO = '-'

  gen-pos = g.generate-position

  king-castling-tgt-files = [2, 6]

  king-castling-tgts = [
    c1 = gen-pos (7, 2)
    g1 = gen-pos (7, 6)
    c8 = gen-pos (0, 2)
    g8 = gen-pos (0, 6)
  ]

  [c1-key, g1-key, c8-key, g8-key] = _.map JSON.stringify king-castling-tgts

  possible-rook-paths = [[5, 7], [3, 0], [61, 63], [59, 56]]

  rook-castling-srcs = {}
  rook-castling-srcs[c8-key] = gen-pos (0, 0)
  rook-castling-srcs[g8-key] = gen-pos (0, 7)
  rook-castling-srcs[c1-key] = gen-pos (7, 0)
  rook-castling-srcs[g1-key] = gen-pos (7, 7)

  rook-castling-tgts = {}
  rook-castling-tgts[c8-key] = gen-pos (0, 3)
  rook-castling-tgts[g8-key] = gen-pos (0, 5)
  rook-castling-tgts[c1-key] = gen-pos (7, 3)
  rook-castling-tgts[g1-key] = gen-pos (7, 5)

  t0  = []
  t1  = [c1]
  t2  = [g1]
  t12 = [c1, g1]
  t3  = [c8]
  t4  = [g8]
  t34 = [c8, g8]

  new-castling-rts = {}

  new-castling-rts[c.white] =
    KQkq : kq, KQk : k, KQq : q, KQ : NO, Kkq : kq, Kk : k, Kq : q, K   : NO
    Qkq  : kq, Qk  : k, Qq  : q, Q  : NO, kq  : kq, k  : k, q  : q, '-' : NO

  new-castling-rts[c.black] =
    KQkq : KQ, Qkq : Q, Kkq : K, kq : NO, KQq : KQ, Qq : Q, Kq : K, q   : NO
    KQk  : KQ, Qk  : Q, Kk  : K, k  : NO, KQ  : KQ, Q  : Q, K  : K, '-' : NO 

  castling-tgts = {}

  castling-tgts[c.white] =
    KQkq : t12, KQk : t12, KQq : t12, KQ  : t12
    Qkq  : t1,  Qk  : t1,  Qq  : t1,  Q   : t1
    Kkq  : t2,  Kk  : t2,  Kq  : t2,  K   : t2
    kq   : t0,  k   : t0,  q   : t0,  '-' : t0

  castling-tgts[c.black] =
    KQkq : t34, Qkq : t34, Kkq : t34, kq  : t34
    KQq  : t3,  Qq : t3,   Kq  : t3,  q   : t3
    KQk  : t4,  Qk : t4,   Kk  : t4,  k   : t4
    KQ   : t0,  Q  : t0,   K   : t0,  '-' : t0 

  castle = \chart2 \tgt ->
    [rook-src, rook-tgt] = rook-castling-path tgt
    bd-after-king-moves  = basicMove chart2 tgt

    chart2 = gen-chart2 (bd-after-king-moves, rook-src)

    basicMove chart2 rook-tgt

  castling? = (src, tgt) ->
    _.abs (u.file-difference (src, tgt)) > 1

  castling-permitted? = (castling-rts, black?) -> \rank-diff ->
    kingward? = rank-diff > 0
    matcher = u.castling-matcher (black?, kingward?)
    _.match matcher 'noFlags' castling-rts

  gen-chart2 = (board, src) ->
    g.generate-chart2
      board  : board
      source : src
      castlingRights  : c.no-catling-rts
      passantPosition : c.unset-passant-pos

  # TODO: Check for non-transitable castling paths.
  # TODO: Check that no pos in the castling path is attackable.
  get-potential-castling-moves = (color, castling-rts) ->
    castling-tgts[color][castling-rts]

  getPotentialKingAttacks = \board \src ->
    temporary-chart2 = g.generate-chart2
      board  : board
      source : src
      castlingRights  : c.no-castling-rts
      passantPosition : c.unset-passant-pos

    pf.getBasicPotentialMoves (temporary-chart2, c.king)

  # TODO: Rewrite #color.at to take a 'chart2' type as an argument.
  getPotentialMoves = \chart2 ->
    # Start testing mode.
    v.vow-chart2 chart2
    # End testing mode.

    board        = x.board-from chart2
    source       = x.position-from chart2
    king-color   = x.color-at board source
    castling-rts = x.castling-rights-from chart2

    basic-potential-moves =
      pf.getBasicPotentialMoves (chart2, c.king)

    reset-getPotentialMoves castling-rts

    basic-potential-moves.concat (
      get-potential-castling-moves (king-color, castling-rts))

  modifyCastlingRights = \chart2 ->
    # Start testing mode.
    v.vow-chart2 chart2
    # End testing mode.

    board        = x.board-from chart2
    src          = x.position-from chart2
    king-color   = x.color-at board src
    castling-rts = x.castling-rights-from chart2

    reset-modifyCastlingRights castling-rts

    new-castling-rts[king-color][castling-rts]

  move = \chart2 \tgt ->
    # Start testing mode.
    v.vow-chart2 chart2
    v.vow-position tgt
    # End testing mode.

    src = x.position-from chart2
    
    if castling? (src, tgt)
      castle chart2 tgt
    else
      non-castling-move chart2 tgt

  basicMove = non-castling-move = \chart2 \tgt ->
    pf.basicMove chart2 tgt

  reset-getPotentialMoves = \castling-rts ->
    if castling-rts == c.no-castling-rts
      pf.getPotentialMoves = \chart2 ->
        # Start testing mode.
        v.vow-chart2 chart2
        # End testing mode.

        pf.getBasicPotentialMoves (chart2, c.king)

  reset-modifyCastlingRights = \castling-rts ->
    if castling-rts == c.no-castling-rts
      pf.modifyCastlingRights = x.castling-rights-from

  rook-castling-path = \king-tgt ->
    key = JSON.stringify king-tgt
    src = rook-castling-srcs[key]
    tgt = rook-castling-tgts[key]
    [src, tgt]

  # -----------------------------------------------------------------

  pf = public-fns = _.defaults [stepper-fns] {
    getPotentialKingAttacks
    getPotentialMoves
    modifyCastlingRights
    move
  }

  return public-fns

)
