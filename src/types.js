// Generated by CoughSyrup 0.1.0
(function() {
  define(['constants'], function(c) {
    var black_question_, board_question_, boolean_question_, bounded_question_, castling_hyphen_right_hyphen_set_question_, castling_hyphen_right_question_, chessman_hyphen_type_question_, chessman_question_, color_hyphen_pair_question_, color_question_, context_question_, empty_question_, fen_hyphen_board_question_, fen_question_, hash_question_, inessent_question_, integer_question_, integral_hyphen_pair_question_, javascript_hyphen_type_question_, non_hyphen_negative_hyphen_integer_question_, non_hyphen_negative_hyphen_integral_hyphen_string_question_, pair_question_, passant_hyphen_position_hyphen_code_question_, passant_hyphen_position_question_, pawn_hyphen_direction_question_, position_hyphen_code_question_, position_hyphen_component_question_, position_question_, promotion_hyphen_position_question_, square_question_, string_question_, undefined_question_, unset_hyphen_passant_hyphen_position_hyphen_code_question_, unset_hyphen_passant_hyphen_position_question_, unset_hyphen_promotion_hyphen_position_question_;
    boolean_question_ = function(val) {
      return val === true || val === false;
    };
    hash_question_ = function(val) {
      return javascript_hyphen_type_question_('Object', val);
    };
    javascript_hyphen_type_question_ = function(type, val) {
      return toString.call(val) === '[object ' + type + ']';
    };
    integer_question_ = function(val) {
      return val === val >> 0;
    };
    non_hyphen_negative_hyphen_integral_hyphen_string_question_ = function(digit_hyphen_as_hyphen_string) {
      var intg;
      intg = Number.parseInt(digit_hyphen_as_hyphen_string, 10);
      return intg === intg >>> 0;
    };
    bounded_question_ = function(val) {
      return val >= 0 && val <= 7 && !(boolean_question_(val));
    };
    empty_question_ = function(square) {
      return square === c.empty_hyphen_square;
    };
    inessent_question_ = function(pos) {
      return pos.every(bounded_question_);
    };
    non_hyphen_negative_hyphen_integer_question_ = function(val) {
      return val === val >>> 0;
    };
    string_question_ = function(val) {
      return javascript_hyphen_type_question_('String', val);
    };
    undefined_question_ = function(val) {
      return val === void 0;
    };
    black_question_ = function(color) {
      return color === c.black;
    };
    board_question_ = function(val) {
      return /^[kqrbnp-]{64,64}$/i.test(val);
    };
    castling_hyphen_right_question_ = function(val) {
      return /^[KQkq]$/.test(val);
    };
    castling_hyphen_right_hyphen_set_question_ = function(val) {
      return /(^-$)|(^K?Q?k?q?$)/.test(val);
    };
    chessman_question_ = function(val) {
      return /^[kqrbnp]$/i.test(val);
    };
    chessman_hyphen_type_question_ = function(val) {
      return c.chessman_hyphen_types.some(function(type) {
        return type === val;
      });
    };
    color_question_ = function(val) {
      return c.colors.some(function(color) {
        return color === val;
      });
    };
    color_hyphen_pair_question_ = function(val) {
      return pair_question_(val) && val.every(color_question_);
    };
    context_question_ = function(val) {
      return hash_question_(val) && board_question_(val.board) && color_question_(val.player) && castling_hyphen_right_hyphen_set_question_(val.castlingRights) && passant_hyphen_position_question_(val.passantPosition);
    };
    fen_question_ = function(val) {
      return string_question_(val) && (function(slots) {
        return fen_hyphen_board_question_(slots[0]) && color_question_(slots[1]) && castling_hyphen_right_hyphen_set_question_(slots[2]) && passant_hyphen_position_hyphen_code_question_(slots[3]) && non_hyphen_negative_hyphen_integral_hyphen_string_question_(slots[4]) && non_hyphen_negative_hyphen_integral_hyphen_string_question_(slots[5]);
      })(val.split(' '));
    };
    fen_hyphen_board_question_ = function(val) {
      return /^([kqrbnp\d]{1,8}\/){1,7}[kqrbnp\d]{1,8}$/i.test(val);
    };
    integral_hyphen_pair_question_ = function(val) {
      return pair_question_(val) && val.every(integer_question_);
    };
    pair_question_ = function(val) {
      return Array.isArray(val) && val.length === 2;
    };
    passant_hyphen_position_question_ = function(pos) {
      return unset_hyphen_passant_hyphen_position_question_(pos) || position_question_(pos);
    };
    passant_hyphen_position_hyphen_code_question_ = function(code) {
      return unset_hyphen_passant_hyphen_position_hyphen_code_question_(code) || position_hyphen_code_question_(code);
    };
    pawn_hyphen_direction_question_ = function(val) {
      return val === 1 || val === -1;
    };
    position_question_ = function(val) {
      return integral_hyphen_pair_question_(val) && inessent_question_(val);
    };
    position_hyphen_code_question_ = function(val) {
      return /^[a-h][1-8]$/.test(val);
    };
    position_hyphen_component_question_ = function(val) {
      return bounded_question_(val) && integer_question_(val);
    };
    promotion_hyphen_position_question_ = function(pos) {
      return unset_hyphen_promotion_hyphen_position_question_(pos) || position_question_(pos);
    };
    square_question_ = function(val) {
      return chessman_question_(val) || empty_question_(val);
    };
    unset_hyphen_passant_hyphen_position_question_ = function(val) {
      return val === c.unset_hyphen_passant_hyphen_pos;
    };
    unset_hyphen_passant_hyphen_position_hyphen_code_question_ = function(val) {
      return val === c.unset_hyphen_passant_hyphen_pos_hyphen_code;
    };
    unset_hyphen_promotion_hyphen_position_question_ = function(val) {
      return val === c.unset_hyphen_promotion_hyphen_pos;
    };
    return {
      black_question_: black_question_,
      board_question_: board_question_,
      bounded_question_: bounded_question_,
      castling_hyphen_right_question_: castling_hyphen_right_question_,
      castling_hyphen_right_hyphen_set_question_: castling_hyphen_right_hyphen_set_question_,
      chessman_question_: chessman_question_,
      chessman_hyphen_type_question_: chessman_hyphen_type_question_,
      color_question_: color_question_,
      color_hyphen_pair_question_: color_hyphen_pair_question_,
      context_question_: context_question_,
      fen_question_: fen_question_,
      fen_hyphen_board_question_: fen_hyphen_board_question_,
      empty_question_: empty_question_,
      inessent_question_: inessent_question_,
      integral_hyphen_pair_question_: integral_hyphen_pair_question_,
      non_hyphen_negative_hyphen_integer_question_: non_hyphen_negative_hyphen_integer_question_,
      passant_hyphen_position_question_: passant_hyphen_position_question_,
      passant_hyphen_position_hyphen_code_question_: passant_hyphen_position_hyphen_code_question_,
      promotion_hyphen_position_question_: promotion_hyphen_position_question_,
      pawn_hyphen_direction_question_: pawn_hyphen_direction_question_,
      position_question_: position_question_,
      position_hyphen_code_question_: position_hyphen_code_question_,
      position_hyphen_component_question_: position_hyphen_component_question_,
      square_question_: square_question_,
      string_question_: string_question_,
      undefined_question_: undefined_question_,
      unset_hyphen_passant_hyphen_position_question_: unset_hyphen_passant_hyphen_position_question_,
      unset_hyphen_passant_hyphen_position_hyphen_code_question_: unset_hyphen_passant_hyphen_position_hyphen_code_question_
    };
  });

}).call(this);
