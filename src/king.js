// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'constants', 'constructors', 'extractors', 'utilities', 'stepper', 'assertions'], function(_, c, g, x, u, stepper_hyphen_fns, v) {
    var castle, castle_hyphen_rook, castling_hyphen_permitted_question_, castling_question_, empty_hyphen_string, file_hyphen_diffs, getPotentialKingAttacks, getPotentialMoves, get_hyphen_castling_hyphen_revocations, get_hyphen_potential_hyphen_castling_hyphen_moves, hyphen, modifyCastlingRights, move, non_hyphen_castling_hyphen_move, pf, public_hyphen_fns, rook_hyphen_castling_hyphen_path;
    empty_hyphen_string = '';
    file_hyphen_diffs = [2, -2];
    hyphen = '-';
    castle = function(board, src, tgt) {
      var bd_hyphen_after_hyphen_king_hyphen_moves, chart2, king, rook_hyphen_src, rook_hyphen_tgt, _ref;
      v.vow_hyphen_board(board);
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      king = x.chessman_hyphen_from(board)(src);
      _ref = rook_hyphen_castling_hyphen_path(x.color_hyphen_of(king), src, tgt), rook_hyphen_tgt = _ref[0], rook_hyphen_src = _ref[1];
      bd_hyphen_after_hyphen_king_hyphen_moves = non_hyphen_castling_hyphen_move(board, src, tgt);
      chart2 = g.generate_hyphen_chart2({
        board: bd_hyphen_after_hyphen_king_hyphen_moves,
        source: rook_hyphen_src,
        castlingRights: c.no_hyphen_castling_hyphen_rts,
        passantPosition: c.unset_hyphen_passant_hyphen_position
      });
      return castle_hyphen_rook(chart2)(rook_hyphen_tgt);
    };
    castle_hyphen_rook = function(chart2) {
      return function(tgt) {
        v.vow_hyphen_chart2(chart2);
        v.vow_hyphen_position(tgt);
        return pk.basicMove(chart2)(tgt);
      };
    };
    castling_question_ = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return u.rank_hyphen_difference(src, tgt) === 0 && _.abs(u.file_hyphen_difference(src, tgt)) === 2;
    };
    castling_hyphen_permitted_question_ = function(castling_hyphen_rts, black_question_) {
      return function(rank_hyphen_diff) {
        var kingward_question_, matcher;
        kingward_question_ = rank_hyphen_diff > 0;
        matcher = u.castling_hyphen_matcher(black_question_, kingward_question_);
        return _.match(matcher)('noFlags')(castling_hyphen_rts);
      };
    };
    get_hyphen_castling_hyphen_revocations = function(color) {
      if (u.black_question_(color)) {
        return c.castling_hyphen_black;
      } else {
        return c.castling_hyphen_white;
      }
    };
    get_hyphen_potential_hyphen_castling_hyphen_moves = function(chart2) {
      var black_question_, board, castling_hyphen_rts, file, gen_hyphen_castling_hyphen_tgt, king_hyphen_color, permitted_hyphen_file_hyphen_diffs, permitted_question_, rank, src, _ref;
      v.vow_hyphen_chart2(chart2);
      board = x.board_hyphen_from(chart2);
      src = x.position_hyphen_from(chart2);
      _ref = x.rank_hyphen__ampersand__hyphen_file_hyphen_from(src), rank = _ref[0], file = _ref[1];
      castling_hyphen_rts = x.castling_hyphen_rights_hyphen_from(chart2);
      king_hyphen_color = x.color_hyphen_at(board)(src);
      black_question_ = u.black_question_(king_hyphen_color);
      permitted_question_ = castling_hyphen_permitted_question_(castling_hyphen_rts, black_question_);
      permitted_hyphen_file_hyphen_diffs = _.filter(permitted_question_)(file_hyphen_diffs);
      gen_hyphen_castling_hyphen_tgt = function(rank, file) {
        return function(file_hyphen_diff) {
          return g.generate_hyphen_position(rank, file + file_hyphen_diff);
        };
      };
      if (castling_hyphen_rts === c.no_hyphen_castling_hyphen_rts) {
        get_hyphen_potential_hyphen_castling_hyphen_moves = function(chart2) {
          return [];
        };
      }
      return _.map(gen_hyphen_castling_hyphen_tgt(rank, file))(permitted_hyphen_file_hyphen_diffs);
    };
    getPotentialKingAttacks = function(chart2) {
      return function(tgt) {
        return [];
      };
    };
    getPotentialMoves = function(chart2) {
      var basic_hyphen_potential_hyphen_moves;
      v.vow_hyphen_chart2(chart2);
      basic_hyphen_potential_hyphen_moves = pf.getBasicPotentialMoves(chart2, c.king);
      return basic_hyphen_potential_hyphen_moves.concat(get_hyphen_potential_hyphen_castling_hyphen_moves(chart2));
    };
    modifyCastlingRights = function(chart2) {
      var board, castling_hyphen_rts, king_hyphen_color, revocations, src;
      v.vow_hyphen_chart2(chart2);
      board = x.board_hyphen_from(chart2);
      src = x.position_hyphen_from(chart2);
      king_hyphen_color = x.color_hyphen_at(board)(src);
      castling_hyphen_rts = x.castling_hyphen_rights_hyphen_from(chart2);
      revocations = get_hyphen_castling_hyphen_revocations(king_hyphen_color);
      if (castling_hyphen_rts === c.no_hyphen_castling_hyphen_rts) {
        modifyCastlingRights = function(chart2) {
          return c.no_hyphen_castling_hyphen_rts;
        };
      }
      return _.pipe(_.map(u.revoke_hyphen_castling_hyphen_right)(revocations))(castling_hyphen_rts);
    };
    move = function(chart2) {
      v.vow_hyphen_chart2(chart2);
      v.vow_hyphen_position(tgt);
      if (castling_question_(src, tgt)) {
        return castle(chart2)(tgt);
      } else {
        return non_hyphen_castling_hyphen_move(chart2)(tgt);
      }
    };
    non_hyphen_castling_hyphen_move = function(chart2) {
      return function(tgt) {
        return pk.basicMove(chart2)(tgt);
      };
    };
    rook_hyphen_castling_hyphen_path = function(king_hyphen_color, king_hyphen_src, king_hyphen_tgt) {
      var conditions, possible_hyphen_rook_hyphen_paths, rook_hyphen_path;
      v.vow_hyphen_color(king_hyphen_color);
      v.vow_hyphen_all_hyphen_positions([king_hyphen_src, king_hyphen_tgt]);
      conditions = [u.black_question_(king_hyphen_color), u.kingward_question_(king_hyphen_src, king_hyphen_tgt)];
      possible_hyphen_rook_hyphen_paths = [[5, 7], [3, 0], [61, 63], [59, 56]];
      return rook_hyphen_path = all_hyphen_to_hyphen_2d(_.binaryIfBranch(conditions)(possible_hyphen_rook_hyphen_paths));
    };
    pf = public_hyphen_fns = _.defaults([stepper_hyphen_fns])({
      getPotentialKingAttacks: getPotentialKingAttacks,
      getPotentialMoves: getPotentialMoves,
      modifyCastlingRights: modifyCastlingRights,
      move: move
    });
    return public_hyphen_fns;
  });

}).call(this);
