// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'constants', 'constructors', 'extractors', 'utilities', 'stepper', 'assertions'], function(_, c, g, x, u, stepper_hyphen_fns, v) {
    var K, KQ, NO, Q, c1, c8, castle, castle_hyphen_rook, castling_hyphen_permitted_question_, castling_hyphen_tgts, castling_question_, g1, g8, getPotentialKingAttacks, getPotentialMoves, get_hyphen_potential_hyphen_castling_hyphen_moves, k, kq, modifyCastlingRights, move, new_hyphen_castling_hyphen_rts, non_hyphen_castling_hyphen_move, pf, public_hyphen_fns, q, reset_hyphen_getPotentialMoves, reset_hyphen_modifyCastlingRights, rook_hyphen_castling_hyphen_path, t0, t1, t12, t2, t3, t34, t4;
    KQ = 'KQ';
    kq = 'kq';
    K = 'K';
    Q = 'Q';
    k = 'k';
    q = 'q';
    NO = '-';
    c1 = [7, 2];
    g1 = [7, 6];
    c8 = [0, 2];
    g8 = [0, 6];
    t0 = [];
    t1 = [c1];
    t2 = [g1];
    t12 = [c1, g1];
    t3 = [c8];
    t4 = [g8];
    t34 = [c8, g8];
    new_hyphen_castling_hyphen_rts = {};
    new_hyphen_castling_hyphen_rts[c.white] = {
      KQkq: kq,
      KQk: k,
      KQq: q,
      KQ: NO,
      Kkq: kq,
      Kk: k,
      Kq: q,
      K: NO,
      Qkq: kq,
      Qk: k,
      Qq: q,
      Q: NO,
      kq: kq,
      k: k,
      q: q,
      '-': NO
    };
    new_hyphen_castling_hyphen_rts[c.black] = {
      KQkq: KQ,
      Qkq: Q,
      Kkq: K,
      kq: NO,
      KQq: KQ,
      Qq: Q,
      Kq: K,
      q: NO,
      KQk: KQ,
      Qk: Q,
      Kk: K,
      k: NO,
      KQ: KQ,
      Q: Q,
      K: K,
      '-': NO
    };
    castling_hyphen_tgts = {};
    castling_hyphen_tgts[c.white] = {
      KQkq: t12,
      KQk: t12,
      KQq: t12,
      KQ: t12,
      Qkq: t1,
      Qk: t1,
      Qq: t1,
      Q: t1,
      Kkq: t2,
      Kk: t2,
      Kq: t2,
      K: t2,
      kq: t0,
      k: t0,
      q: t0,
      '-': t0
    };
    castling_hyphen_tgts[c.black] = {
      KQkq: t34,
      Qkq: t34,
      Kkq: t34,
      kq: t34,
      KQq: t3,
      Qq: t3,
      Kq: t3,
      q: t3,
      KQk: t4,
      Qk: t4,
      Kk: t4,
      k: t4,
      KQ: t0,
      Q: t0,
      K: t0,
      '-': t0
    };
    castle = function(board, src, tgt) {
      var bd_hyphen_after_hyphen_king_hyphen_moves, chart2, king, rook_hyphen_src, rook_hyphen_tgt, _ref;
      v.vow_hyphen_board(board);
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      king = x.chessman_hyphen_from(board)(src);
      _ref = rook_hyphen_castling_hyphen_path(x.color_hyphen_of(king), src, tgt), rook_hyphen_tgt = _ref[0], rook_hyphen_src = _ref[1];
      bd_hyphen_after_hyphen_king_hyphen_moves = non_hyphen_castling_hyphen_move(board, src, tgt);
      chart2 = g.generate_hyphen_chart2({
        board: bd_hyphen_after_hyphen_king_hyphen_moves,
        source: rook_hyphen_src,
        castlingRights: c.no_hyphen_castling_hyphen_rts,
        passantPosition: c.unset_hyphen_passant_hyphen_position
      });
      return castle_hyphen_rook(chart2)(rook_hyphen_tgt);
    };
    castle_hyphen_rook = function(chart2) {
      return function(tgt) {
        v.vow_hyphen_chart2(chart2);
        v.vow_hyphen_position(tgt);
        return pk.basicMove(chart2)(tgt);
      };
    };
    castling_question_ = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return u.rank_hyphen_difference(src, tgt) === 0 && _.abs(u.file_hyphen_difference(src, tgt)) === 2;
    };
    castling_hyphen_permitted_question_ = function(castling_hyphen_rts, black_question_) {
      return function(rank_hyphen_diff) {
        var kingward_question_, matcher;
        kingward_question_ = rank_hyphen_diff > 0;
        matcher = u.castling_hyphen_matcher(black_question_, kingward_question_);
        return _.match(matcher)('noFlags')(castling_hyphen_rts);
      };
    };
    get_hyphen_potential_hyphen_castling_hyphen_moves = function(color, castling_hyphen_rts) {
      return castling_hyphen_tgts[color][castling_hyphen_rts];
    };
    getPotentialKingAttacks = function(chart2) {
      return function(tgt) {
        return [];
      };
    };
    getPotentialMoves = function(chart2) {
      var basic_hyphen_potential_hyphen_moves, board, castling_hyphen_rts, king_hyphen_color, source;
      v.vow_hyphen_chart2(chart2);
      board = x.board_hyphen_from(chart2);
      source = x.position_hyphen_from(chart2);
      king_hyphen_color = x.color_hyphen_at(board)(source);
      castling_hyphen_rts = x.castling_hyphen_rights_hyphen_from(chart2);
      basic_hyphen_potential_hyphen_moves = pf.getBasicPotentialMoves(chart2, c.king);
      reset_hyphen_getPotentialMoves(castling_hyphen_rts);
      return basic_hyphen_potential_hyphen_moves.concat(get_hyphen_potential_hyphen_castling_hyphen_moves(king_hyphen_color, castling_hyphen_rts));
    };
    modifyCastlingRights = function(chart2) {
      var board, castling_hyphen_rts, king_hyphen_color, src;
      v.vow_hyphen_chart2(chart2);
      board = x.board_hyphen_from(chart2);
      src = x.position_hyphen_from(chart2);
      king_hyphen_color = x.color_hyphen_at(board)(src);
      castling_hyphen_rts = x.castling_hyphen_rights_hyphen_from(chart2);
      reset_hyphen_modifyCastlingRights(castling_hyphen_rts);
      return new_hyphen_castling_hyphen_rts[color][castling_hyphen_rts];
    };
    move = function(chart2) {
      v.vow_hyphen_chart2(chart2);
      v.vow_hyphen_position(tgt);
      if (castling_question_(src, tgt)) {
        return castle(chart2)(tgt);
      } else {
        return non_hyphen_castling_hyphen_move(chart2)(tgt);
      }
    };
    non_hyphen_castling_hyphen_move = function(chart2) {
      return function(tgt) {
        return pk.basicMove(chart2)(tgt);
      };
    };
    reset_hyphen_getPotentialMoves = function(castling_hyphen_rts) {
      if (castling_hyphen_rts === c.no_hyphen_castling_hyphen_rts) {
        return pf.getPotentialMoves = function(chart2) {
          v.vow_hyphen_chart2(chart2);
          return pf.getBasicPotentialMoves(chart2, c.king);
        };
      }
    };
    reset_hyphen_modifyCastlingRights = function(castling_hyphen_rts) {
      if (castling_hyphen_rts === c.no_hyphen_castling_hyphen_rts) {
        return pf.modifyCastlingRights = x.castling_hyphen_rights_hyphen_from;
      }
    };
    rook_hyphen_castling_hyphen_path = function(king_hyphen_color, king_hyphen_src, king_hyphen_tgt) {
      var conditions, possible_hyphen_rook_hyphen_paths, rook_hyphen_path;
      v.vow_hyphen_color(king_hyphen_color);
      v.vow_hyphen_all_hyphen_positions([king_hyphen_src, king_hyphen_tgt]);
      conditions = [u.black_question_(king_hyphen_color), u.kingward_question_(king_hyphen_src, king_hyphen_tgt)];
      possible_hyphen_rook_hyphen_paths = [[5, 7], [3, 0], [61, 63], [59, 56]];
      return rook_hyphen_path = all_hyphen_to_hyphen_2d(_.binaryIfBranch(conditions)(possible_hyphen_rook_hyphen_paths));
    };
    pf = public_hyphen_fns = _.defaults([stepper_hyphen_fns])({
      getPotentialKingAttacks: getPotentialKingAttacks,
      getPotentialMoves: getPotentialMoves,
      modifyCastlingRights: modifyCastlingRights,
      move: move
    });
    return public_hyphen_fns;
  });

}).call(this);
