// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'constants', 'constructors', 'extractors', 'utilities', 'stepper', 'assertions'], function(_, c, g, x, u, stepper_hyphen_fns, v) {
    var K, KQ, NO, Q, basicMove, c1, c1_hyphen_key, c8, c8_hyphen_key, castle, castle2, castling_hyphen_permitted_question_, castling_hyphen_tgts, castling_question_, g1, g1_hyphen_key, g8, g8_hyphen_key, gen_hyphen_chart2, gen_hyphen_pos, getPotentialKingAttacks, getPotentialKingAttacks2, getPotentialMoves, getPotentialMoves2, get_hyphen_potential_hyphen_castling_hyphen_moves, k, king_hyphen_castling_hyphen_tgt_hyphen_files, king_hyphen_castling_hyphen_tgts, kq, modifyCastlingRights, modifyCastlingRights2, move, move2, new_hyphen_castling_hyphen_rts, non_hyphen_castling_hyphen_move, non_hyphen_castling_hyphen_move2, pf, possible_hyphen_rook_hyphen_paths, public_hyphen_fns, q, reset_hyphen_getPotentialMoves, reset_hyphen_modifyCastlingRights, rook_hyphen_castling_hyphen_path, rook_hyphen_castling_hyphen_srcs, rook_hyphen_castling_hyphen_tgts, t0, t1, t12, t2, t3, t34, t4, _ref;
    KQ = 'KQ';
    kq = 'kq';
    K = 'K';
    Q = 'Q';
    k = 'k';
    q = 'q';
    NO = '-';
    gen_hyphen_pos = g.generate_hyphen_position;
    king_hyphen_castling_hyphen_tgt_hyphen_files = [2, 6];
    king_hyphen_castling_hyphen_tgts = [c1 = gen_hyphen_pos(7, 2), g1 = gen_hyphen_pos(7, 6), c8 = gen_hyphen_pos(0, 2), g8 = gen_hyphen_pos(0, 6)];
    _ref = _.map(JSON.stringify)(king_hyphen_castling_hyphen_tgts), c1_hyphen_key = _ref[0], g1_hyphen_key = _ref[1], c8_hyphen_key = _ref[2], g8_hyphen_key = _ref[3];
    possible_hyphen_rook_hyphen_paths = [[5, 7], [3, 0], [61, 63], [59, 56]];
    rook_hyphen_castling_hyphen_srcs = {};
    rook_hyphen_castling_hyphen_srcs[c8_hyphen_key] = gen_hyphen_pos(0, 0);
    rook_hyphen_castling_hyphen_srcs[g8_hyphen_key] = gen_hyphen_pos(0, 7);
    rook_hyphen_castling_hyphen_srcs[c1_hyphen_key] = gen_hyphen_pos(7, 0);
    rook_hyphen_castling_hyphen_srcs[g1_hyphen_key] = gen_hyphen_pos(7, 7);
    rook_hyphen_castling_hyphen_tgts = {};
    rook_hyphen_castling_hyphen_tgts[c8_hyphen_key] = gen_hyphen_pos(0, 3);
    rook_hyphen_castling_hyphen_tgts[g8_hyphen_key] = gen_hyphen_pos(0, 5);
    rook_hyphen_castling_hyphen_tgts[c1_hyphen_key] = gen_hyphen_pos(7, 3);
    rook_hyphen_castling_hyphen_tgts[g1_hyphen_key] = gen_hyphen_pos(7, 5);
    t0 = [];
    t1 = [c1];
    t2 = [g1];
    t12 = [c1, g1];
    t3 = [c8];
    t4 = [g8];
    t34 = [c8, g8];
    new_hyphen_castling_hyphen_rts = {};
    new_hyphen_castling_hyphen_rts[c.white] = {
      KQkq: kq,
      KQk: k,
      KQq: q,
      KQ: NO,
      Kkq: kq,
      Kk: k,
      Kq: q,
      K: NO,
      Qkq: kq,
      Qk: k,
      Qq: q,
      Q: NO,
      kq: kq,
      k: k,
      q: q,
      '-': NO
    };
    new_hyphen_castling_hyphen_rts[c.black] = {
      KQkq: KQ,
      Qkq: Q,
      Kkq: K,
      kq: NO,
      KQq: KQ,
      Qq: Q,
      Kq: K,
      q: NO,
      KQk: KQ,
      Qk: Q,
      Kk: K,
      k: NO,
      KQ: KQ,
      Q: Q,
      K: K,
      '-': NO
    };
    castling_hyphen_tgts = {};
    castling_hyphen_tgts[c.white] = {
      KQkq: t12,
      KQk: t12,
      KQq: t12,
      KQ: t12,
      Qkq: t1,
      Qk: t1,
      Qq: t1,
      Q: t1,
      Kkq: t2,
      Kk: t2,
      Kq: t2,
      K: t2,
      kq: t0,
      k: t0,
      q: t0,
      '-': t0
    };
    castling_hyphen_tgts[c.black] = {
      KQkq: t34,
      Qkq: t34,
      Kkq: t34,
      kq: t34,
      KQq: t3,
      Qq: t3,
      Kq: t3,
      q: t3,
      KQk: t4,
      Qk: t4,
      Kk: t4,
      k: t4,
      KQ: t0,
      Q: t0,
      K: t0,
      '-': t0
    };
    castle = function(chart2) {
      return function(tgt) {
        var bd_hyphen_after_hyphen_king_hyphen_moves, rook_hyphen_src, rook_hyphen_tgt, _ref1;
        _ref1 = rook_hyphen_castling_hyphen_path(tgt), rook_hyphen_src = _ref1[0], rook_hyphen_tgt = _ref1[1];
        bd_hyphen_after_hyphen_king_hyphen_moves = basicMove(chart2)(tgt);
        chart2 = gen_hyphen_chart2(bd_hyphen_after_hyphen_king_hyphen_moves, rook_hyphen_src);
        return basicMove(chart2)(rook_hyphen_tgt);
      };
    };
    castle2 = function(bd, src, tgt) {
      var basicMove2, bd_hyphen_after_hyphen_king_hyphen_moves, rook_hyphen_src, rook_hyphen_tgt, _ref1;
      basicMove2 = pf.basicMove2;
      _ref1 = rook_hyphen_castling_hyphen_path(tgt), rook_hyphen_src = _ref1[0], rook_hyphen_tgt = _ref1[1];
      bd_hyphen_after_hyphen_king_hyphen_moves = basicMove2(bd, src)(tgt);
      return basicMove2(bd_hyphen_after_hyphen_king_hyphen_moves, rook_hyphen_src)(rook_hyphen_tgt);
    };
    castling_question_ = function(src, tgt) {
      return _.abs(u.file_hyphen_difference(src, tgt)) > 1;
    };
    castling_hyphen_permitted_question_ = function(castling_hyphen_rts, black_question_) {
      return function(rank_hyphen_diff) {
        var kingward_question_, matcher;
        kingward_question_ = rank_hyphen_diff > 0;
        matcher = u.castling_hyphen_matcher(black_question_, kingward_question_);
        return _.match(matcher)('noFlags')(castling_hyphen_rts);
      };
    };
    gen_hyphen_chart2 = function(board, src) {
      return g.generate_hyphen_chart2({
        board: board,
        source: src,
        castlingRights: c.no_hyphen_catling_hyphen_rts,
        passantPosition: c.unset_hyphen_passant_hyphen_pos
      });
    };
    get_hyphen_potential_hyphen_castling_hyphen_moves = function(color, castling_hyphen_rts) {
      return castling_hyphen_tgts[color][castling_hyphen_rts];
    };
    getPotentialKingAttacks = function(board) {
      return function(src) {
        var temporary_hyphen_chart2;
        temporary_hyphen_chart2 = g.generate_hyphen_chart2({
          board: board,
          source: src,
          castlingRights: c.no_hyphen_castling_hyphen_rts,
          passantPosition: c.unset_hyphen_passant_hyphen_pos
        });
        return pf.getBasicPotentialMoves(temporary_hyphen_chart2, c.king);
      };
    };
    getPotentialKingAttacks2 = function(bd, src, rts) {
      v.vow_hyphen_board(bd);
      v.vow_hyphen_position(src);
      v.vow_hyphen_castling_hyphen_right_hyphen_set(rts);
      return getPotentialMoves2(bd, src, rts);
    };
    getPotentialMoves = function(chart2) {
      var basic_hyphen_potential_hyphen_moves, board, castling_hyphen_rts, king_hyphen_color, source;
      v.vow_hyphen_chart2(chart2);
      board = x.board_hyphen_from(chart2);
      source = x.position_hyphen_from(chart2);
      king_hyphen_color = x.color_hyphen_at(board)(source);
      castling_hyphen_rts = x.castling_hyphen_rights_hyphen_from(chart2);
      basic_hyphen_potential_hyphen_moves = pf.getBasicPotentialMoves(chart2, c.king);
      reset_hyphen_getPotentialMoves(castling_hyphen_rts);
      return basic_hyphen_potential_hyphen_moves.concat(get_hyphen_potential_hyphen_castling_hyphen_moves(king_hyphen_color, castling_hyphen_rts));
    };
    getPotentialMoves2 = function(bd, src, rts) {
      var basic_hyphen_moves, king_hyphen_color;
      v.vow_hyphen_board(bd);
      v.vow_hyphen_position(src);
      v.vow_hyphen_castling_hyphen_right_hyphen_set(rts);
      king_hyphen_color = x.color_hyphen_at(bd)(src);
      basic_hyphen_moves = pf.getBasicPotentialMoves2(bd, src, rts, void 0, c.king);
      return basic_hyphen_moves.concat(get_hyphen_potential_hyphen_castling_hyphen_moves(king_hyphen_color, rts));
    };
    modifyCastlingRights = function(chart2) {
      var board, castling_hyphen_rts, king_hyphen_color, src;
      v.vow_hyphen_chart2(chart2);
      board = x.board_hyphen_from(chart2);
      src = x.position_hyphen_from(chart2);
      king_hyphen_color = x.color_hyphen_at(board)(src);
      castling_hyphen_rts = x.castling_hyphen_rights_hyphen_from(chart2);
      reset_hyphen_modifyCastlingRights(castling_hyphen_rts);
      return new_hyphen_castling_hyphen_rts[king_hyphen_color][castling_hyphen_rts];
    };
    modifyCastlingRights2 = function(rts, src) {
      var king_hyphen_color;
      v.vow_hyphen_castling_hyphen_right_hyphen_set(rts);
      v.vow_hyphen_position(src);
      king_hyphen_color = x.rank_hyphen_of(src) === 0 ? c.black : c.white;
      return new_hyphen_castling_hyphen_rts[king_hyphen_color][rts];
    };
    move = function(chart2) {
      return function(tgt) {
        var src;
        v.vow_hyphen_chart2(chart2);
        v.vow_hyphen_position(tgt);
        src = x.position_hyphen_from(chart2);
        if (castling_question_(src, tgt)) {
          return castle(chart2)(tgt);
        } else {
          return non_hyphen_castling_hyphen_move(chart2)(tgt);
        }
      };
    };
    move2 = function(bd, src) {
      return function(tgt) {
        v.vow_hyphen_board(bd);
        v.vow_hyphen_all_hyphen_positions([src, tgt]);
        if (castling_question_(src, tgt)) {
          return castle2(bd, src, tgt);
        } else {
          return non_hyphen_castling_hyphen_move(bd, src, tgt);
        }
      };
    };
    non_hyphen_castling_hyphen_move2 = function(bd, src, tgt) {
      return pf.basicMove(bd, src)(tgt);
    };
    basicMove = non_hyphen_castling_hyphen_move = function(chart2) {
      return function(tgt) {
        return pf.basicMove(chart2)(tgt);
      };
    };
    reset_hyphen_getPotentialMoves = function(castling_hyphen_rts) {
      if (castling_hyphen_rts === c.no_hyphen_castling_hyphen_rts) {
        return pf.getPotentialMoves = function(chart2) {
          v.vow_hyphen_chart2(chart2);
          return pf.getBasicPotentialMoves(chart2, c.king);
        };
      }
    };
    reset_hyphen_modifyCastlingRights = function(castling_hyphen_rts) {
      if (castling_hyphen_rts === c.no_hyphen_castling_hyphen_rts) {
        return pf.modifyCastlingRights = x.castling_hyphen_rights_hyphen_from;
      }
    };
    rook_hyphen_castling_hyphen_path = function(king_hyphen_tgt) {
      var key, src, tgt;
      key = JSON.stringify(king_hyphen_tgt);
      src = rook_hyphen_castling_hyphen_srcs[key];
      tgt = rook_hyphen_castling_hyphen_tgts[key];
      return [src, tgt];
    };
    pf = public_hyphen_fns = _.defaults([stepper_hyphen_fns])({
      getPotentialKingAttacks: getPotentialKingAttacks,
      getPotentialMoves: getPotentialMoves,
      modifyCastlingRights: modifyCastlingRights,
      move: move,
      getPotentialKingAttacks2: getPotentialKingAttacks2,
      getPotentialMoves2: getPotentialMoves2,
      modifyCastlingRights2: modifyCastlingRights2,
      move2: move2
    });
    return public_hyphen_fns;
  });

}).call(this);
