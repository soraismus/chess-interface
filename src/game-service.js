// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'constants', 'utilities', 'extractors', 'slider', 'king', 'rook', 'knight', 'pawn', 'assertions'], function(_, c, u, x, slider_hyphen_fns, king_hyphen_fns, rook_hyphen_fns, knight_hyphen_fns, pawn_hyphen_fns, v) {
    var call, contains, dispatch_hyphen_table, getPotentialKingAttacks, getPotentialMoves, king_hyphen_position, modifyCastlingRights, move, move_hyphen_legal_question_, query_hyphen_game_hyphen_service, setPassantPosition, setPromotionPosition, test_hyphen_mode;
    dispatch_hyphen_table = {};
    dispatch_hyphen_table[c.king] = king_hyphen_fns;
    dispatch_hyphen_table[c.queen] = slider_hyphen_fns;
    dispatch_hyphen_table[c.rook] = rook_hyphen_fns;
    dispatch_hyphen_table[c.bishop] = slider_hyphen_fns;
    dispatch_hyphen_table[c.knight] = knight_hyphen_fns;
    dispatch_hyphen_table[c.pawn] = pawn_hyphen_fns;
    call = function(fn_hyphen_name) {
      return function(chessman_hyphen_type) {
        _.vowStr(fn_hyphen_name);
        v.vow_hyphen_chessman_hyphen_type(chessman_hyphen_type);
        return dispatch_hyphen_table[chessman_hyphen_type][fn_hyphen_name];
      };
    };
    contains = function(potential_hyphen_positions, tgt) {
      return _.any(u.same_hyphen_position_question_(tgt))(potential_hyphen_positions);
    };
    getPotentialKingAttacks = function(board) {
      return function(src) {
        var chessman_hyphen_type;
        v.vow_hyphen_board(board);
        v.vow_hyphen_position(src);
        chessman_hyphen_type = x.chessman_hyphen_type_hyphen_at(board)(src);
        return call('getPotentialKingAttacks')(chessman_hyphen_type)(board)(src);
      };
    };
    getPotentialMoves = function(chessman_hyphen_type, chart2) {
      v.vow_hyphen_chessman_hyphen_type(chessman_hyphen_type);
      v.vow_hyphen_chart2(chart2);
      return call('getPotentialMoves')(chessman_hyphen_type)(chart2, chessman_hyphen_type);
    };
    king_hyphen_position = function(color) {
      return function(board) {
        var king;
        v.vow_hyphen_color(color);
        v.vow_hyphen_board(board);
        king = u.black_question_(color) ? c.black_hyphen_king : c.white_hyphen_king;
        return u.to_hyphen_2d(_.indexOf(board)(king));
      };
    };
    modifyCastlingRights = function(chart2) {
      var chessman_hyphen_type;
      v.vow_hyphen_chart2(chart2);
      chessman_hyphen_type = x.chessman_hyphen_type_hyphen_from(chart2);
      return call('modifyCastlingRights')(chessman_hyphen_type)(chart2);
    };
    move = function(chart2) {
      return function(tgt) {
        var chessman_hyphen_type;
        v.vow_hyphen_chart2(chart2);
        v.vow_hyphen_position(tgt);
        chessman_hyphen_type = x.chessman_hyphen_type_hyphen_from(chart2);
        return call('move')(chessman_hyphen_type)(chart2)(tgt);
      };
    };
    move_hyphen_legal_question_ = function(chart2, tgt) {
      var chessman_hyphen_type, potential_hyphen_tgts;
      v.vow_hyphen_chart2(chart2);
      v.vow_hyphen_position(tgt);
      chessman_hyphen_type = x.chessman_hyphen_type_hyphen_from(chart2);
      potential_hyphen_tgts = getPotentialMoves(chessman_hyphen_type, chart2);
      return contains(potential_hyphen_tgts, tgt);
    };
    query_hyphen_game_hyphen_service = function(chart2) {
      return function(tgt) {
        v.vow_hyphen_chart2(chart2);
        return v.vow_hyphen_position(tgt);
      };
    };
    setPassantPosition = function(chart2, tgt) {
      var chessman_hyphen_type;
      v.vow_hyphen_chart2(chart2);
      v.vow_hyphen_position(tgt);
      chessman_hyphen_type = x.chessman_hyphen_type_hyphen_from(chart2);
      return call('setPassantPosition')(chessman_hyphen_type)(chart2, tgt);
    };
    setPromotionPosition = function(chart2, tgt) {
      var chessman_hyphen_type;
      v.vow_hyphen_chart2(chart2);
      v.vow_hyphen_position(tgt);
      chessman_hyphen_type = x.chessman_hyphen_type_hyphen_from(chart2);
      return call('setPromotionPosition')(chessman_hyphen_type)(chart2, tgt);
    };
    test_hyphen_mode = {
      call: call,
      getPotentialKingAttacks: getPotentialKingAttacks,
      getPotentialMoves: getPotentialMoves,
      king_hyphen_position: king_hyphen_position,
      modifyCastlingRights: modifyCastlingRights,
      move: move,
      move_hyphen_legal_question_: move_hyphen_legal_question_,
      query_hyphen_game_hyphen_service: query_hyphen_game_hyphen_service,
      setPassantPosition: setPassantPosition,
      setPromotionPosition: setPromotionPosition
    };
    return test_hyphen_mode;
  });

}).call(this);
