// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'constants', 'constructors', 'utilities', 'extractors', 'chessman', 'assertions'], function(_, c, g, u, x, chessman_hyphen_fns, v) {
    var advancing_hyphen_2_hyphen_squares_question_, at_hyphen_home_hyphen_rank_question_, at_hyphen_promotion_hyphen_rank_question_, behind, delete_hyphen_passed_hyphen_pawn, direction_hyphen_for, directions, getPotentialKingAttacks2, getPotentialMoves2, get_hyphen_diag_hyphen_attacks, get_hyphen_diagonal_hyphen_positions, get_hyphen_fwd_hyphen_moves, home_hyphen_ranks, move2, pf, promotion_hyphen_ranks, public_hyphen_fns, setPassantPosition2, setPromotionPosition2;
    home_hyphen_ranks = {};
    home_hyphen_ranks[c.black] = 1;
    home_hyphen_ranks[c.white] = 6;
    directions = {};
    directions[c.black] = 1;
    directions[c.white] = -1;
    promotion_hyphen_ranks = {};
    promotion_hyphen_ranks[c.black] = 7;
    promotion_hyphen_ranks[c.white] = 0;
    advancing_hyphen_2_hyphen_squares_question_ = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return _.abs(u.rank_hyphen_difference(src, tgt)) > 1;
    };
    at_hyphen_home_hyphen_rank_question_ = function(color, rank) {
      return home_hyphen_ranks[color] === rank;
    };
    at_hyphen_promotion_hyphen_rank_question_ = function(color, rank) {
      return promotion_hyphen_ranks[color] === rank;
    };
    behind = function(dir, position) {
      var file, rank, _ref;
      v.vow_hyphen_pawn_hyphen_direction(dir);
      v.vow_hyphen_position(position);
      dir = -1 * dir;
      _ref = x.rank_hyphen__ampersand__hyphen_file_hyphen_from(position), rank = _ref[0], file = _ref[1];
      return [rank + dir, file];
    };
    direction_hyphen_for = function(color) {
      return directions[color];
    };
    get_hyphen_diagonal_hyphen_positions = function(rank, file, dir) {
      var gen_hyphen_pos;
      gen_hyphen_pos = g.generate_hyphen_position_bang_.bind(null, rank + dir);
      return _.filter(u.inessent_question_)(_.map(gen_hyphen_pos)([file - 1, file + 1]));
    };
    get_hyphen_diag_hyphen_attacks = function(board, rank, file, color, dir, passant) {
      var available_question_, color_hyphen_at, diag_hyphen_attacks, foe_hyphen_present_question_, passant_question_;
      v.vow_hyphen_board(board);
      v.vow_hyphen_all_hyphen_position_hyphen_components([rank, file]);
      v.vow_hyphen_color(color);
      v.vow_hyphen_passant_hyphen_position(passant);
      v.vow_hyphen_pawn_hyphen_direction(dir);
      foe_hyphen_present_question_ = function(pos) {
        return u.opponent_question_([color, color_hyphen_at(pos)]);
      };
      passant_question_ = u.same_hyphen_position_question_(passant);
      available_question_ = _.or([foe_hyphen_present_question_, passant_question_]);
      color_hyphen_at = x.color_hyphen_at(board);
      diag_hyphen_attacks = get_hyphen_diagonal_hyphen_positions(rank, file, dir);
      return _.filter(available_question_)(diag_hyphen_attacks);
    };
    get_hyphen_fwd_hyphen_moves = function(board, rank, file, color, dir) {
      var fwd_hyphen_moves, tgt1, tgt1_hyphen_color, tgt2, tgt2_hyphen_color;
      v.vow_hyphen_board(board);
      v.vow_hyphen_all_hyphen_position_hyphen_components([rank, file]);
      v.vow_hyphen_color(color);
      v.vow_hyphen_pawn_hyphen_direction(dir);
      fwd_hyphen_moves = [];
      tgt1 = g.generate_hyphen_position(rank + dir, file);
      tgt1_hyphen_color = x.color_hyphen_at(board)(tgt1);
      if (!u.color_hyphen_absent_question_(tgt1_hyphen_color)) {
        return fwd_hyphen_moves;
      }
      fwd_hyphen_moves.push(tgt1);
      if (!at_hyphen_home_hyphen_rank_question_(color, rank)) {
        return fwd_hyphen_moves;
      }
      tgt2 = g.generate_hyphen_position(rank + 2 * dir, file);
      tgt2_hyphen_color = x.color_hyphen_at(board)(tgt2);
      if (!u.color_hyphen_absent_question_(tgt2_hyphen_color)) {
        return fwd_hyphen_moves;
      }
      fwd_hyphen_moves.push(tgt2);
      return fwd_hyphen_moves;
    };
    getPotentialKingAttacks2 = function(bd, src) {
      var color, file, pawn_hyphen_direction, rank, _ref;
      v.vow_hyphen_board(bd);
      v.vow_hyphen_position(src);
      color = x.color_hyphen_at(bd)(src);
      _ref = x.rank_hyphen__ampersand__hyphen_file_hyphen_from(src), rank = _ref[0], file = _ref[1];
      pawn_hyphen_direction = direction_hyphen_for(color);
      return get_hyphen_diagonal_hyphen_positions(rank, file, pawn_hyphen_direction);
    };
    getPotentialMoves2 = function(bd, src, rts, passant) {
      var color, dir, file, moves, rank, _ref;
      v.vow_hyphen_board(bd);
      v.vow_hyphen_position(src);
      v.vow_hyphen_passant_hyphen_position(passant);
      color = x.color_hyphen_at(bd)(src);
      _ref = x.rank_hyphen__ampersand__hyphen_file_hyphen_from(src), rank = _ref[0], file = _ref[1];
      dir = direction_hyphen_for(color);
      moves = Array.concat(get_hyphen_fwd_hyphen_moves(bd, rank, file, color, dir), get_hyphen_diag_hyphen_attacks(bd, rank, file, color, dir, passant));
      return _.filter(u.inessent_question_)(moves);
    };
    delete_hyphen_passed_hyphen_pawn = function(board, color, passant) {
      var direction;
      direction = direction_hyphen_for(color);
      return u.replace(c.empty_hyphen_square, board, behind(direction, passant));
    };
    move2 = function(bd, src, rts, passant) {
      return function(tgt) {
        var bd_hyphen_after_hyphen_basic_hyphen_move, color;
        v.vow_hyphen_board(bd);
        v.vow_hyphen_all_hyphen_positions([src, tgt]);
        v.vow_hyphen_passant_hyphen_position(passant);
        bd_hyphen_after_hyphen_basic_hyphen_move = pf.basicMove2(bd, src)(tgt);
        if (u.passant_hyphen_position_hyphen_unset_question_(passant)) {
          return bd_hyphen_after_hyphen_basic_hyphen_move;
        } else {
          color = x.color_hyphen_at(bd)(src);
          return delete_hyphen_passed_hyphen_pawn(bd_hyphen_after_hyphen_basic_hyphen_move, color, passant);
        }
      };
    };
    setPassantPosition2 = function(pawn_hyphen_color, src, tgt) {
      var dir;
      v.vow_hyphen_color(pawn_hyphen_color);
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      if (advancing_hyphen_2_hyphen_squares_question_(src, tgt)) {
        dir = direction_hyphen_for(pawn_hyphen_color);
        return behind(dir, tgt);
      } else {
        return c.unset_hyphen_passant_hyphen_pos;
      }
    };
    setPromotionPosition2 = function(pawn_hyphen_color, tgt) {
      var tgt_hyphen_rank;
      v.vow_hyphen_color(pawn_hyphen_color);
      v.vow_hyphen_position(tgt);
      tgt_hyphen_rank = x.rank_hyphen__ampersand__hyphen_file_hyphen_from(tgt)[0];
      if (at_hyphen_promotion_hyphen_rank_question_(pawn_hyphen_color, tgt_hyphen_rank)) {
        return tgt;
      } else {
        return c.unset_hyphen_promotion_hyphen_pos;
      }
    };
    pf = public_hyphen_fns = _.defaults([chessman_hyphen_fns])({
      getPotentialKingAttacks2: getPotentialKingAttacks2,
      getPotentialMoves2: getPotentialMoves2,
      move2: move2,
      setPassantPosition2: setPassantPosition2,
      setPromotionPosition2: setPromotionPosition2
    });
    return public_hyphen_fns;
  });

}).call(this);
