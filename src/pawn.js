// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'constants', 'constructors', 'utilities', 'extractors', 'assertions'], function(_, c, g, u, x, v) {
    var advancing_hyphen_2_hyphen_squares_question_, at_hyphen_home_hyphen_rank_question_, at_hyphen_promotion_hyphen_rank_question_, behind, direction_hyphen_for, directions, getPotentialKingAttacks, getPotentialMoves, get_hyphen_diagonal_hyphen_positions, get_hyphen_potential_hyphen_diagonal_hyphen_attacks, get_hyphen_potential_hyphen_forward_hyphen_moves, home_hyphen_ranks, modifyCastlingRights, move, promotion_hyphen_ranks, setPassantPosition, setPromotionPosition;
    home_hyphen_ranks = {};
    home_hyphen_ranks[c.black] = 1;
    home_hyphen_ranks[c.white] = 6;
    directions = {};
    directions[c.black] = 1;
    directions[c.white] = -1;
    promotion_hyphen_ranks = {};
    promotion_hyphen_ranks[c.black] = 7;
    promotion_hyphen_ranks[c.white] = 0;
    advancing_hyphen_2_hyphen_squares_question_ = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return _.abs(u.rank_hyphen_difference(src, tgt)) > 1;
    };
    at_hyphen_home_hyphen_rank_question_ = function(color, rank) {
      return home_hyphen_ranks[color] === rank;
    };
    at_hyphen_promotion_hyphen_rank_question_ = function(color, rank) {
      return promotion_hyphen_ranks[color] === rank;
    };
    behind = function(dir, position) {
      var file, rank, _ref;
      v.vow_hyphen_pawn_hyphen_direction(dir);
      v.vow_hyphen_position(position);
      dir = -1 * dir;
      _ref = x.rank_hyphen__ampersand__hyphen_file_hyphen_from(position), rank = _ref[0], file = _ref[1];
      return [rank + dir, file];
    };
    direction_hyphen_for = function(color) {
      return directions[color];
    };
    get_hyphen_diagonal_hyphen_positions = function(rank, file, dir) {
      var gen_hyphen_pos;
      gen_hyphen_pos = g.generate_hyphen_position_bang_.bind(null, rank + dir);
      return _.filter(u.inessent_question_)(_.map(gen_hyphen_pos)([file - 1, file + 1]));
    };
    get_hyphen_potential_hyphen_diagonal_hyphen_attacks = function(board, rank, file, color, dir, passant) {
      var available_question_, color_hyphen_at, diag_hyphen_attacks, foe_hyphen_present_question_, passant_question_;
      v.vow_hyphen_board(board);
      v.vow_hyphen_all_hyphen_position_hyphen_components([rank, file]);
      v.vow_hyphen_color(color);
      v.vow_hyphen_passant_hyphen_position(passant);
      v.vow_hyphen_pawn_hyphen_direction(dir);
      foe_hyphen_present_question_ = function(pos) {
        return u.opponent_question_([color, color_hyphen_at(pos)]);
      };
      passant_question_ = u.same_hyphen_position_question_(passant);
      available_question_ = _.or([foe_hyphen_present_question_, passant_question_]);
      color_hyphen_at = x.color_hyphen_at(board);
      diag_hyphen_attacks = get_hyphen_diagonal_hyphen_positions(rank, file, dir);
      return _.filter(available_question_)(diag_hyphen_attacks);
    };
    get_hyphen_potential_hyphen_forward_hyphen_moves = function(board, rank, file, color, dir) {
      var fwd_hyphen_moves, tgt1, tgt1_hyphen_color, tgt2, tgt2_hyphen_color;
      v.vow_hyphen_board(board);
      v.vow_hyphen_all_hyphen_position_hyphen_components([rank, file]);
      v.vow_hyphen_color(color);
      v.vow_hyphen_pawn_hyphen_direction(dir);
      fwd_hyphen_moves = [];
      tgt1 = g.generate_hyphen_position(rank + dir, file);
      tgt1_hyphen_color = x.color_hyphen_at(board)(tgt1);
      if (!u.color_hyphen_absent_question_(tgt1_hyphen_color)) {
        return fwd_hyphen_moves;
      }
      fwd_hyphen_moves.push(tgt1);
      if (!at_hyphen_home_hyphen_rank_question_(color, rank)) {
        return fwd_hyphen_moves;
      }
      tgt2 = g.generate_hyphen_position(rank + 2 * dir, file);
      tgt2_hyphen_color = x.color_hyphen_at(board)(tgt2);
      if (!u.color_hyphen_absent_question_(tgt2_hyphen_color)) {
        return fwd_hyphen_moves;
      }
      fwd_hyphen_moves.push(tgt2);
      return fwd_hyphen_moves;
    };
    getPotentialKingAttacks = function(board) {
      return function(src) {
        var color, dir, file, rank, _ref;
        v.vow_hyphen_board(board);
        v.vow_hyphen_position(src);
        _ref = x.rank_hyphen__ampersand__hyphen_file_hyphen_from(src), rank = _ref[0], file = _ref[1];
        color = x.color_hyphen_at(board)(src);
        dir = direction_hyphen_for(color);
        return get_hyphen_diagonal_hyphen_positions(rank, file, dir);
      };
    };
    getPotentialMoves = function(chart2) {
      var bd, color, dir, file, passant, potential_hyphen_moves, rank, src, _ref;
      v.vow_hyphen_chart2(chart2);
      bd = x.board_hyphen_from(chart2);
      src = x.position_hyphen_from(chart2);
      _ref = x.rank_hyphen__ampersand__hyphen_file_hyphen_from(src), rank = _ref[0], file = _ref[1];
      color = x.color_hyphen_at(bd)(src);
      dir = direction_hyphen_for(color);
      passant = x.passant_hyphen_from(chart2);
      potential_hyphen_moves = _.meld([get_hyphen_potential_hyphen_forward_hyphen_moves(bd, rank, file, color, dir), get_hyphen_potential_hyphen_diagonal_hyphen_attacks(bd, rank, file, color, dir, passant)]);
      return _.filter(u.inessent_question_)(potential_hyphen_moves);
    };
    modifyCastlingRights = function(chart2) {
      v.vow_hyphen_chart2(chart2);
      return x.castling_hyphen_rights_hyphen_from(chart2);
    };
    move = function(chart2) {
      return function(tgt) {
        var bd_hyphen_w_slash__hyphen_duplicate_hyphen_piece, board, color, dir, passant, result, src, src_hyphen_chessman;
        v.vow_hyphen_chart2(chart2);
        v.vow_hyphen_position(tgt);
        board = x.board_hyphen_from(chart2);
        src = x.position_hyphen_from(chart2);
        src_hyphen_chessman = x.square_hyphen_at(board)(src);
        passant = x.passant_hyphen_from(chart2);
        bd_hyphen_w_slash__hyphen_duplicate_hyphen_piece = u.replace(src_hyphen_chessman, board, tgt);
        result = u.replace(c.empty_hyphen_square, bd_hyphen_w_slash__hyphen_duplicate_hyphen_piece, src);
        if (u.passant_hyphen_position_hyphen_unset_question_(passant)) {
          return result;
        }
        color = x.color_hyphen_at(board)(src);
        dir = direction_hyphen_for(color);
        return u.replace(c.empty_hyphen_square, result, behind(dir, passant));
      };
    };
    setPassantPosition = function(chart2, tgt) {
      var bd, color, dir, src;
      v.vow_hyphen_chart2(chart2);
      v.vow_hyphen_position(tgt);
      src = x.position_hyphen_from(chart2);
      if (advancing_hyphen_2_hyphen_squares_question_(src, tgt)) {
        bd = x.board_hyphen_from(chart2);
        color = x.color_hyphen_at(bd)(src);
        dir = direction_hyphen_for(color);
        return behind(dir, tgt);
      } else {
        return c.unset_hyphen_passant_hyphen_pos;
      }
    };
    setPromotionPosition = function(chart2, tgt) {
      var bd, color, rank, src;
      v.vow_hyphen_chart2(chart2);
      v.vow_hyphen_position(tgt);
      bd = x.board_hyphen_from(chart2);
      src = x.position_hyphen_from(chart2);
      color = x.color_hyphen_at(bd)(src);
      rank = x.rank_hyphen__ampersand__hyphen_file_hyphen_from(tgt)[0];
      if (at_hyphen_promotion_hyphen_rank_question_(color, rank)) {
        return tgt;
      } else {
        return c.unset_hyphen_promotion_hyphen_pos;
      }
    };
    return {
      getPotentialKingAttacks: getPotentialKingAttacks,
      getPotentialMoves: getPotentialMoves,
      modifyCastlingRights: modifyCastlingRights,
      move: move,
      setPassantPosition: setPassantPosition,
      setPromotionPosition: setPromotionPosition
    };
  });

}).call(this);
