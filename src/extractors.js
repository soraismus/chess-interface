// Generated by CoughSyrup 0.1.0
(function() {
  define(['base-helpers', 'constants', 'types', 'assertions'], function(_, c, y, v) {
    var chessman_hyphen_positions_hyphen_from, chessman_hyphen_type_hyphen_at, chessman_hyphen_type_hyphen_of, color_hyphen_at, color_hyphen_of, colors_hyphen_at, corresponding_hyphen_black_hyphen_chessman, file_hyphen_of, of_hyphen_color_question_, rank_hyphen__ampersand__hyphen_file_hyphen_from, rank_hyphen_of, square_hyphen_at, to_hyphen_1d, to_hyphen_2d, type_hyphen_of;
    type_hyphen_of = {};
    type_hyphen_of[c.black_hyphen_king] = c.king;
    type_hyphen_of[c.black_hyphen_queen] = c.queen;
    type_hyphen_of[c.black_hyphen_rook] = c.rook;
    type_hyphen_of[c.black_hyphen_bishop] = c.bishop;
    type_hyphen_of[c.black_hyphen_knight] = c.knight;
    type_hyphen_of[c.black_hyphen_pawn] = c.pawn;
    to_hyphen_1d = function(pos) {
      var file, rank;
      v.vow_hyphen_position(pos);
      rank = rank_hyphen_of(pos);
      file = file_hyphen_of(pos);
      return 8 * rank + file;
    };
    to_hyphen_2d = function(idx) {
      return [Math.floor(idx / 8), idx % 8];
    };
    corresponding_hyphen_black_hyphen_chessman = function(chessman) {
      v.vow_hyphen_chessman(chessman);
      if (_.white_question_(chessman)) {
        return _.to_hyphen_black(chessman);
      } else {
        return chessman;
      }
    };
    of_hyphen_color_question_ = function(color) {
      return function(square) {
        v.vow_hyphen_color(color);
        v.vow_hyphen_square(square);
        return color === color_hyphen_of(square);
      };
    };
    chessman_hyphen_positions_hyphen_from = function(board, color) {
      var get_hyphen_pos, i, positions, split_hyphen_board;
      v.vow_hyphen_board(board);
      v.vow_hyphen_color(color);
      i = -1;
      split_hyphen_board = board.split('');
      positions = [];
      get_hyphen_pos = function(color) {
        var color_hyphen_pred;
        color_hyphen_pred = of_hyphen_color_question_(color);
        return function(sq) {
          i += 1;
          if (color_hyphen_pred(sq)) {
            return positions.push(to_hyphen_2d(i));
          }
        };
      };
      split_hyphen_board.forEach(get_hyphen_pos(color));
      return positions;
    };
    chessman_hyphen_type_hyphen_at = function(board) {
      return function(pos) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_position(pos);
        return chessman_hyphen_type_hyphen_of(square_hyphen_at(board)(pos));
      };
    };
    chessman_hyphen_type_hyphen_of = function(chessman) {
      var abbrev;
      v.vow_hyphen_chessman(chessman);
      abbrev = corresponding_hyphen_black_hyphen_chessman(chessman);
      return type_hyphen_of[abbrev];
    };
    color_hyphen_at = function(board) {
      return function(pos) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_position(pos);
        return color_hyphen_of(square_hyphen_at(board)(pos));
      };
    };
    color_hyphen_of = function(square) {
      v.vow_hyphen_square(square);
      switch (false) {
        case !(_.black_question_(square)):
          return c.black;
        case !(_.white_question_(square)):
          return c.white;
        default:
          return c.absent_hyphen_color;
      }
    };
    colors_hyphen_at = function(board) {
      return function(positions) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_all_hyphen_positions(positions);
        return positions.map(color_hyphen_at(board));
      };
    };
    file_hyphen_of = function(_arg) {
      var file, rank;
      rank = _arg[0], file = _arg[1];
      v.vow_hyphen_position([rank, file]);
      return file;
    };
    rank_hyphen__ampersand__hyphen_file_hyphen_from = function(val) {
      v.vow_hyphen_integral_hyphen_pair(val);
      return val;
    };
    rank_hyphen_of = function(_arg) {
      var file, rank;
      rank = _arg[0], file = _arg[1];
      v.vow_hyphen_position([rank, file]);
      return rank;
    };
    square_hyphen_at = function(board) {
      return function(pos) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_position(pos);
        return board[to_hyphen_1d(pos)];
      };
    };
    return {
      chessman_hyphen_positions_hyphen_from: chessman_hyphen_positions_hyphen_from,
      chessman_hyphen_type_hyphen_at: chessman_hyphen_type_hyphen_at,
      chessman_hyphen_type_hyphen_of: chessman_hyphen_type_hyphen_of,
      corresponding_hyphen_black_hyphen_chessman: corresponding_hyphen_black_hyphen_chessman,
      color_hyphen_at: color_hyphen_at,
      color_hyphen_of: color_hyphen_of,
      colors_hyphen_at: colors_hyphen_at,
      file_hyphen_of: file_hyphen_of,
      rank_hyphen__ampersand__hyphen_file_hyphen_from: rank_hyphen__ampersand__hyphen_file_hyphen_from,
      rank_hyphen_of: rank_hyphen_of,
      square_hyphen_at: square_hyphen_at,
      to_hyphen_1d: to_hyphen_1d,
      to_hyphen_2d: to_hyphen_2d
    };
  });

}).call(this);
