// Generated by CoughSyrup 0.1.0
(function() {
  define(['constants', 'types', 'utilities', 'assertions'], function(c, y, u, v) {
    var black, contract_hyphen_board, contract_hyphen_spaces, decode_hyphen_fen, decode_hyphen_position_hyphen_code, decode_hyphen_set_hyphen_position_hyphen_code, digit_hyphen_as_hyphen_string_question_, empty_hyphen_square, empty_hyphen_string, encode_hyphen_context, encode_hyphen_passant_hyphen_position, encode_hyphen_set_hyphen_passant_hyphen_position, expand_hyphen_char, expand_hyphen_empty_hyphen_squares, expand_hyphen_fen_hyphen_board, fen_hyphen_service, generate_hyphen_fen, space, white;
    contract_hyphen_board = function(board) {
      var match, result, rgx;
      v.vow_hyphen_board(board);
      rgx = /.{8,8}/g;
      match = rgx.exec(board);
      result = contract_hyphen_spaces(match[0]);
      while ((match = rgx.exec(board)) !== null) {
        result += "/" + (contract_hyphen_spaces(match[0]));
      }
      return result;
    };
    contract_hyphen_spaces = function(string) {
      var match;
      while ((match = string.match(/-+/)) !== null) {
        string = string.replace(match[0], match[0].length);
      }
      return string;
    };
    decode_hyphen_fen = function(fen) {
      var board, castlingRights, clock, fen_hyphen_bd, fen_hyphen_clock, fen_hyphen_mv_hyphen_nbr, fen_hyphen_passant, moveNumber, passantPosition, player, promotionPosition, _ref;
      v.vow_hyphen_fen(fen);
      _ref = fen.split(space), fen_hyphen_bd = _ref[0], player = _ref[1], castlingRights = _ref[2], fen_hyphen_passant = _ref[3], fen_hyphen_clock = _ref[4], fen_hyphen_mv_hyphen_nbr = _ref[5];
      board = expand_hyphen_fen_hyphen_board(fen_hyphen_bd);
      passantPosition = decode_hyphen_position_hyphen_code(fen_hyphen_passant);
      promotionPosition = '-';
      clock = Number.parseInt(fen_hyphen_clock, 10);
      moveNumber = Number.parseInt(fen_hyphen_mv_hyphen_nbr, 10);
      return {
        board: board,
        player: player,
        castlingRights: castlingRights,
        passantPosition: passantPosition,
        promotionPosition: promotionPosition,
        clock: clock,
        moveNumber: moveNumber
      };
    };
    decode_hyphen_position_hyphen_code = function(pos_hyphen_code) {
      v.vow_hyphen_passant_hyphen_position_hyphen_code(pos_hyphen_code);
      if (y.unset_hyphen_passant_hyphen_position_hyphen_code_question_(pos_hyphen_code)) {
        return c.unset_hyphen_passant_hyphen_pos_hyphen_code;
      } else {
        return decode_hyphen_set_hyphen_position_hyphen_code(pos_hyphen_code);
      }
    };
    decode_hyphen_set_hyphen_position_hyphen_code = function(pos_hyphen_code) {
      var file, rank;
      rank = 8 - Number.parseInt(pos_hyphen_code[1], 10);
      file = (pos_hyphen_code.charCodeAt(0)) - 97;
      return [rank, file];
    };
    digit_hyphen_as_hyphen_string_question_ = function(char) {
      return /^[1-8]$/.test(char);
    };
    encode_hyphen_context = function(ctx) {
      var castlingRights, fen_hyphen_bd, fen_hyphen_clock, fen_hyphen_mv_hyphen_nbr, fen_hyphen_passant, player;
      v.vow_hyphen_context(ctx);
      player = ctx.player, castlingRights = ctx.castlingRights;
      fen_hyphen_bd = contract_hyphen_board(ctx.board);
      fen_hyphen_passant = encode_hyphen_passant_hyphen_position(ctx.passantPosition);
      fen_hyphen_clock = ctx.clock;
      fen_hyphen_mv_hyphen_nbr = ctx.moveNumber;
      return generate_hyphen_fen(fen_hyphen_bd, player, castlingRights, fen_hyphen_passant, fen_hyphen_clock, fen_hyphen_mv_hyphen_nbr);
    };
    encode_hyphen_passant_hyphen_position = function(passant) {
      v.vow_hyphen_passant_hyphen_position(passant);
      if (y.unset_hyphen_passant_hyphen_position_question_(passant)) {
        return c.unset_hyphen_passant_hyphen_pos;
      } else {
        return encode_hyphen_set_hyphen_passant_hyphen_position(passant);
      }
    };
    encode_hyphen_set_hyphen_passant_hyphen_position = function(_arg) {
      var file, file_hyphen_letter, rank, rank_hyphen_number;
      rank = _arg[0], file = _arg[1];
      file_hyphen_letter = String.fromCharCode(97 + file);
      rank_hyphen_number = 8 - rank;
      return "" + file_hyphen_letter + rank_hyphen_number;
    };
    expand_hyphen_fen_hyphen_board = function(fen_hyphen_board) {
      v.vow_hyphen_fen_hyphen_board(fen_hyphen_board);
      return fen_hyphen_board.replace('/', '', 'g').split('').map(expand_hyphen_char).join('');
    };
    expand_hyphen_char = function(char) {
      if (digit_hyphen_as_hyphen_string_question_(char)) {
        return expand_hyphen_empty_hyphen_squares(char);
      } else {
        return char;
      }
    };
    expand_hyphen_empty_hyphen_squares = function(digit_hyphen_as_hyphen_string) {
      var nbr_hyphen_times;
      v.vow(/\d/.test(digit_hyphen_as_hyphen_string))('Invalid numeric character');
      nbr_hyphen_times = Number.parseInt(digit_hyphen_as_hyphen_string, 10);
      return empty_hyphen_square.repeat(nbr_hyphen_times);
    };
    generate_hyphen_fen = function(bd, plyr, rts, pass, clock, mv_hyphen_nbr) {
      return "" + bd + " " + plyr + " " + rts + " " + pass + " " + clock + " " + mv_hyphen_nbr;
    };
    black = 'b';
    empty_hyphen_square = '-';
    empty_hyphen_string = '';
    space = ' ';
    white = 'w';
    return {
      contract_hyphen_board: contract_hyphen_board,
      decode_hyphen_fen: decode_hyphen_fen,
      decode_hyphen_position_hyphen_code: decode_hyphen_position_hyphen_code,
      encode_hyphen_context: encode_hyphen_context,
      encode_hyphen_passant_hyphen_position: encode_hyphen_passant_hyphen_position,
      expand_hyphen_fen_hyphen_board: expand_hyphen_fen_hyphen_board
    };
    fen_hyphen_service = {
      extract_hyphen_chart: extract_hyphen_chart
    };
    return fen_hyphen_service;
  });

}).call(this);
