// Generated by CoughSyrup 0.1.0
(function() {
  define(['constructors', 'extractors', 'utilities', 'game-service', 'react', 'jquery', 'jqueryUi'], function(g, x, u, gs, React, $) {
    var add_hyphen_board, add_hyphen_chessman, add_hyphen_mount_hyphen_point, add_hyphen_promotion_hyphen_msg, add_hyphen_promotion_hyphen_option, add_hyphen_promotion_hyphen_option_hyphen_image, add_hyphen_promotion_hyphen_options, add_hyphen_rank, add_hyphen_square, chessman_hyphen_on, courtiers, css_hyphen_board_hyphen_class, css_hyphen_chessman_hyphen_class, css_hyphen_square_hyphen_class, div, dom, extract_hyphen_pos, query_hyphen_game_hyphen_service, register, register_hyphen_promote, render, src_hyphen_for, trigger, type_hyphen_at, zero_hyphen_to_hyphen_seven, _ref;
    dom = React.DOM;
    div = dom.div;
    zero_hyphen_to_hyphen_seven = [0, 1, 2, 3, 4, 5, 6, 7];
    courtiers = ['q', 'r', 'b', 'n'];
    type_hyphen_at = x.corresponding_hyphen_black_hyphen_chessman;
    _ref = (function() {
      var events, register, trigger;
      events = {};
      register = function(name, callback_hyphen_w_slash__hyphen_ctx) {
        var callback;
        callback = function(optional_hyphen_arg) {
          var result;
          result = callback_hyphen_w_slash__hyphen_ctx(optional_hyphen_arg);
          delete events[name];
          return result;
        };
        return events[name] = callback;
      };
      trigger = function(name, optional_hyphen_arg) {
        return events[name](optional_hyphen_arg);
      };
      return [register, trigger];
    })(), register = _ref[0], trigger = _ref[1];
    add_hyphen_board = function(player, board, inactive_question_) {
      var ranks;
      ranks = zero_hyphen_to_hyphen_seven.map(add_hyphen_rank(player, board));
      return dom.table({
        className: css_hyphen_board_hyphen_class(inactive_question_)
      }, ranks);
    };
    add_hyphen_chessman = function(player, color, type, row, col) {
      return dom.img({
        className: css_hyphen_chessman_hyphen_class(player, color, row, col),
        src: src_hyphen_for(color, type)
      });
    };
    add_hyphen_mount_hyphen_point = function(player, board, prom_hyphen_pos) {
      var display_hyphen_prom_hyphen_opts_question_, prev_hyphen_player;
      prev_hyphen_player = u.opposing_hyphen_color(player);
      display_hyphen_prom_hyphen_opts_question_ = u.promotion_hyphen_position_hyphen_set_question_(prom_hyphen_pos);
      return div({
        className: 'mount-point'
      }, add_hyphen_board(player, board, display_hyphen_prom_hyphen_opts_question_), add_hyphen_promotion_hyphen_options(display_hyphen_prom_hyphen_opts_question_, prev_hyphen_player));
    };
    add_hyphen_promotion_hyphen_msg = function(message) {
      return dom.span({
        id: 'promotion-msg'
      }, message);
    };
    add_hyphen_promotion_hyphen_option = function(color) {
      return function(png_hyphen_type) {
        var chessman;
        chessman = g.generate_hyphen_chessman(x.chessman_hyphen_type_hyphen_of(png_hyphen_type), color);
        return div({
          id: "promotion-type-" + png_hyphen_type,
          className: 'promotion-option',
          onClick: function() {
            var new_hyphen_ctx;
            new_hyphen_ctx = trigger('promote', chessman);
            return render(new_hyphen_ctx);
          }
        }, add_hyphen_promotion_hyphen_option_hyphen_image(color, png_hyphen_type));
      };
    };
    add_hyphen_promotion_hyphen_option_hyphen_image = function(color, png_hyphen_type) {
      return dom.img({
        className: 'promotion-option-img',
        src: src_hyphen_for(color, png_hyphen_type)
      });
    };
    add_hyphen_promotion_hyphen_options = function(to_hyphen_be_hyphen_displayed_question_, color) {
      var content;
      if (!to_hyphen_be_hyphen_displayed_question_) {
        return null;
      }
      content = 'Promote your pawn.';
      return div({
        id: 'promotion-options'
      }, add_hyphen_promotion_hyphen_msg(content), courtiers.map(add_hyphen_promotion_hyphen_option(color)));
    };
    add_hyphen_rank = function(player, board) {
      return function(row) {
        return (function(add_hyphen_square) {
          var squares;
          squares = zero_hyphen_to_hyphen_seven.map(add_hyphen_square);
          return dom.tr({
            className: 'row'
          }, squares);
        })(add_hyphen_square(player, board, row));
      };
    };
    add_hyphen_square = function(player, board, row) {
      return function(col) {
        var chessman, square;
        square = x.square_hyphen_at(board)([row, col]);
        chessman = chessman_hyphen_on(player, square, row, col);
        return dom.td({
          id: "pos-" + row + "-" + col,
          className: css_hyphen_square_hyphen_class(row, col)
        }, chessman);
      };
    };
    chessman_hyphen_on = function(player, square, row, col) {
      var color, type;
      if (u.occupied_question_(square)) {
        color = x.color_hyphen_of(square);
        type = type_hyphen_at(square);
        return add_hyphen_chessman(player, color, type, row, col);
      } else {
        return null;
      }
    };
    css_hyphen_board_hyphen_class = function(inactive_question_) {
      if (inactive_question_ === '-') {
        return 'board inactive';
      } else {
        return 'board';
      }
    };
    css_hyphen_chessman_hyphen_class = function(player, color, row, col) {
      var state;
      state = player === color ? 'active' : 'inactive';
      return "" + state + " ch-pos-" + row + "-" + col;
    };
    css_hyphen_square_hyphen_class = function(row, col) {
      return "sq sq-pos-" + row + "-" + col;
    };
    extract_hyphen_pos = function(node_hyphen_class) {
      var col, regx, res, row, _ref1;
      regx = /..-pos-(\d)-(\d)/;
      res = regx.exec(node_hyphen_class);
      return _ref1 = res.slice(1).map(Number.toInteger), row = _ref1[0], col = _ref1[1], _ref1;
    };
    query_hyphen_game_hyphen_service = function(event, ui, ctx) {
      var src, tgt;
      src = extract_hyphen_pos(ui.draggable[0].className);
      tgt = extract_hyphen_pos(event.target.className);
      return gs.query_hyphen_game_hyphen_service(ctx, src, tgt);
    };
    register_hyphen_promote = function(ctx) {
      if (u.promotion_hyphen_position_hyphen_set_question_(x.promotion_hyphen_position_hyphen_from(ctx))) {
        return register('promote', gs.promote(ctx));
      }
    };
    render = function(ctx) {
      var board, establish_hyphen_drag_hyphen__ampersand__hyphen_drop, player, promotionPosition;
      board = ctx.board, player = ctx.player, promotionPosition = ctx.promotionPosition;
      establish_hyphen_drag_hyphen__ampersand__hyphen_drop = function() {
        var active_hyphen_nodes, draggable;
        active_hyphen_nodes = $('.active');
        draggable = active_hyphen_nodes.draggable.bind(active_hyphen_nodes);
        draggable({
          snap: '.sq',
          snapMode: 'inner',
          stack: '.piece',
          containment: '.board',
          start: function() {
            return register('revert', function() {
              return draggable('option', 'revert', true);
            });
          }
        });
        return $('.sq').droppable({
          accept: '.active',
          drop: function(event, ui) {
            var new_hyphen_ctx;
            new_hyphen_ctx = query_hyphen_game_hyphen_service(event, ui, ctx);
            register_hyphen_promote(new_hyphen_ctx);
            render(new_hyphen_ctx);
            return trigger('revert');
          }
        });
      };
      React.renderComponent(add_hyphen_mount_hyphen_point(player, board, promotionPosition), document.getElementById('chess'));
      return establish_hyphen_drag_hyphen__ampersand__hyphen_drop();
    };
    src_hyphen_for = function(color, png_hyphen_type) {
      return "assets/" + color + png_hyphen_type + ".png";
    };
    return {
      render: render
    };
  });

}).call(this);
