// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'constants', 'extractors', 'types', 'assertions'], function(_, c, x, y, v) {
    var available_question_, black_question_, color_hyphen_absent_question_, empty_hyphen_at_question_, empty_question_, file_hyphen_difference, inessent_question_, king_hyphen_position, offsets_hyphen_for, opponent_hyphen_at_question_, opponent_question_, opposing_hyphen_color, passant_hyphen_position_hyphen_set_question_, passant_hyphen_position_hyphen_unset_question_, rank_hyphen_difference, replace, same_hyphen_position_question_, to_hyphen_2d, unallied_question_;
    available_question_ = function(board, pos1) {
      return function(pos2) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_all_hyphen_positions([pos1, pos2]);
        return empty_hyphen_at_question_(board)(pos2) || (function() {
          var color_hyphen_pair;
          color_hyphen_pair = x.colors_hyphen_at(board)([pos1, pos2]);
          return opponent_question_(color_hyphen_pair);
        })();
      };
    };
    black_question_ = function(color) {
      v.vow_hyphen_color(color);
      return color === c.black;
    };
    color_hyphen_absent_question_ = function(color) {
      v.vow_hyphen_color(color);
      return color === c.absent_hyphen_color;
    };
    empty_question_ = function(square) {
      v.vow_hyphen_square(square);
      return y.empty_question_(square);
    };
    empty_hyphen_at_question_ = function(board) {
      return function(pos) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_position(pos);
        return empty_question_(x.square_hyphen_at(board)(pos));
      };
    };
    rank_hyphen_difference = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return (x.rank_hyphen_of(tgt)) - (x.rank_hyphen_of(src));
    };
    file_hyphen_difference = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return (x.file_hyphen_of(tgt)) - (x.file_hyphen_of(src));
    };
    inessent_question_ = function(pos) {
      return y.inessent_question_(pos);
    };
    king_hyphen_position = function(color) {
      return function(board) {
        var king;
        v.vow_hyphen_color(color);
        v.vow_hyphen_expanded_hyphen_board(board);
        king = black_question_(color) ? c.black_hyphen_king : c.white_hyphen_king;
        return to_hyphen_2d(_.indexOf(board)(king));
      };
    };
    offsets_hyphen_for = function(chessman_hyphen_type) {
      v.vow_hyphen_chessman_hyphen_type(chessman_hyphen_type);
      return c.move_hyphen_offsets[chessman_hyphen_type];
    };
    opponent_question_ = function(_arg) {
      var color1, color2;
      color1 = _arg[0], color2 = _arg[1];
      v.vow_hyphen_color_hyphen_pair([color1, color2]);
      return color2 !== c.absent_hyphen_color && color2 !== color1 && color1 !== c.absent_hyphen_color;
    };
    opponent_hyphen_at_question_ = function(board, pos1) {
      return function(pos2) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_all_hyphen_positions([pos1, pos2]);
        return opponent_question_(_.map(x.color_hyphen_at(board))([pos1, pos2]));
      };
    };
    opposing_hyphen_color = function(active_hyphen_color) {
      v.vow_hyphen_color(active_hyphen_color);
      if (black_question_(active_hyphen_color)) {
        return c.white;
      } else {
        return c.black;
      }
    };
    passant_hyphen_position_hyphen_set_question_ = function(passant_hyphen_position) {
      v.vow_hyphen_passant_hyphen_position(passant_hyphen_position);
      return !(passant_hyphen_position_hyphen_unset_question_(passant_hyphen_position));
    };
    passant_hyphen_position_hyphen_unset_question_ = function(passant_hyphen_position) {
      v.vow_hyphen_passant_hyphen_position(passant_hyphen_position);
      return passant_hyphen_position === c.unset_hyphen_passant_hyphen_pos;
    };
    rank_hyphen_difference = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return (x.rank_hyphen_of(tgt)) - (x.rank_hyphen_of(src));
    };
    replace = function(square, board, pos) {
      var board_hyphen_slice, idx, _ref;
      v.vow_hyphen_square(square);
      v.vow_hyphen_board(board);
      v.vow_hyphen_position(pos);
      _ref = [_.sliceOn(board), x.to_hyphen_1d(pos)], board_hyphen_slice = _ref[0], idx = _ref[1];
      return _.concat([board_hyphen_slice([0, idx]), square, board_hyphen_slice(idx + 1)]);
    };
    same_hyphen_position_question_ = function(pos1) {
      return function(pos2) {
        v.vow_hyphen_all_hyphen_passant_hyphen_positions([pos1, pos2]);
        return passant_hyphen_position_hyphen_set_question_(pos1) && pos1[0] === pos2[0] && pos1[1] === pos2[1];
      };
    };
    to_hyphen_2d = function(idx) {
      return [_.floor(idx / 8), idx % 8];
    };
    unallied_question_ = function(colors) {
      v.vow_hyphen_color_hyphen_pair(colors);
      return colors[0] !== colors[1] && _.notBoth(color_hyphen_absent_question_)(colors);
    };
    return {
      available_question_: available_question_,
      black_question_: black_question_,
      color_hyphen_absent_question_: color_hyphen_absent_question_,
      empty_hyphen_at_question_: empty_hyphen_at_question_,
      file_hyphen_difference: file_hyphen_difference,
      inessent_question_: inessent_question_,
      king_hyphen_position: king_hyphen_position,
      offsets_hyphen_for: offsets_hyphen_for,
      opponent_question_: opponent_question_,
      opposing_hyphen_color: opposing_hyphen_color,
      passant_hyphen_position_hyphen_unset_question_: passant_hyphen_position_hyphen_unset_question_,
      rank_hyphen_difference: rank_hyphen_difference,
      replace: replace,
      same_hyphen_position_question_: same_hyphen_position_question_,
      to_hyphen_2d: to_hyphen_2d,
      unallied_question_: unallied_question_
    };
  });

}).call(this);
