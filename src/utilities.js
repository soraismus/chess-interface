// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'constants', 'extractors', 'types', 'assertions'], function(_, c, x, y, v) {
    var ally_question_, available_question_, black_question_, castling_hyphen_matcher, chessman_hyphen_black_question_, chessman_hyphen_white_question_, empty_hyphen_at_question_, empty_question_, en_hyphen_passant_hyphen_attack_hyphen_permitted_question_, file_hyphen_difference, inessent_question_, king_hyphen_position, kingside_question_, kingward_question_, motion_question_, not_hyphen_at_question_, occupied_question_, of_hyphen_color_question_, of_hyphen_specified_hyphen_type_question_, offsets_hyphen_for, opponent_hyphen_at_question_, opponent_question_, opposing_hyphen_color, passant_hyphen_position_hyphen_set_question_, passant_hyphen_position_hyphen_unset_question_, pawn_hyphen_direction, permissible_hyphen_advances, promote, queenward_question_, rank_hyphen_difference, replace, revoke_hyphen_castling_hyphen_right, same_hyphen_position_question_, sort_hyphen_by_hyphen_color, to_hyphen_1d, to_hyphen_2d, transparent_question_, unallied_question_;
    ally_question_ = function(color_hyphen_pair) {
      v.vow_hyphen_color_hyphen_pair(color_hyphen_pair);
      return _.equiv(color_hyphen_pair) && _.neither(transparent_question_)(color_hyphen_pair);
    };
    available_question_ = function(board, pos1) {
      return function(pos2) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_all_hyphen_positions([pos1, pos2]);
        return empty_hyphen_at_question_(board)(pos2) || (function() {
          var color_hyphen_pair;
          color_hyphen_pair = x.colors_hyphen_at(board)([pos1, pos2]);
          return opponent_question_(color_hyphen_pair);
        })();
      };
    };
    black_question_ = function(color) {
      v.vow_hyphen_color(color);
      return color === c.black;
    };
    castling_hyphen_matcher = function(bool1, bool2) {
      _.vowAllBool([bool1, bool2]);
      return _.bindaryIfBranch([bool1, bool2])([c.castling_hyphen_black_hyphen_kingward, c.castling_hyphen_black_hyphen_queenward, c.castling_hyphen_white_hyphen_kingward, c.castling_hyphen_white_hyphen_queenward]);
    };
    chessman_hyphen_black_question_ = function(chessman) {
      v.vow_hyphen_chessman(chessman);
      return _.isLC(chessman);
    };
    chessman_hyphen_white_question_ = function(chessman) {
      v.vow_hyphen_chessman(chessman);
      return _.isUC(chessman);
    };
    empty_question_ = function(square) {
      v.vow_hyphen_square(square);
      return y.empty_question_(square);
    };
    empty_hyphen_at_question_ = function(board) {
      return function(pos) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_position(pos);
        return empty_question_(x.square_hyphen_at(board)(pos));
      };
    };
    en_hyphen_passant_hyphen_attack_hyphen_permitted_question_ = function(passant) {
      return function(tgt) {
        v.vow_hyphen_passant_hyphen_position(passant);
        v.vow_hyphen_position(tgt);
        return passant_hyphen_position_hyphen_set_question_(passant) && same_hyphen_position_question_([passant, tgt]);
      };
    };
    rank_hyphen_difference = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return (x.rank_hyphen_of(tgt)) - (x.rank_hyphen_of(src));
    };
    file_hyphen_difference = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return (x.file_hyphen_of(tgt)) - (x.file_hyphen_of(src));
    };
    inessent_question_ = function(pos) {
      return y.inessent_question_(pos);
    };
    king_hyphen_position = function(color) {
      return function(board) {
        var king;
        v.vow_hyphen_color(color);
        v.vow_hyphen_expanded_hyphen_board(board);
        king = black_question_(color) ? c.black_hyphen_king : c.white_hyphen_king;
        return to_hyphen_2d(_.indexOf(board)(king));
      };
    };
    kingside_question_ = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([tgt, src]);
      return x.file_hyphen_of(src) >= 4;
    };
    kingward_question_ = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return file_hyphen_difference(src, tgt) > 0;
    };
    motion_question_ = function(_arg) {
      var src, tgt;
      tgt = _arg[0], src = _arg[1];
      return not_hyphen_at_question_(tgt)(src);
    };
    not_hyphen_at_question_ = function(pos2) {
      return function(pos1) {
        v.vow_hyphen_all_hyphen_positions([pos2, pos1]);
        return !(same_hyphen_position_question_([pos2, pos1]));
      };
    };
    occupied_question_ = function(square) {
      v.vow_hyphen_square(square);
      return !(c.empty_question_(square));
    };
    of_hyphen_color_question_ = function(color) {
      var pred;
      pred = black_question_(color) ? chessman_hyphen_black_question_ : chessman_hyphen_white_question_;
      return function(chessman) {
        return pred(chessman);
      };
    };
    offsets_hyphen_for = function(chessman_hyphen_type) {
      v.vow_hyphen_chessman_hyphen_type(chessman_hyphen_type);
      return c.move_hyphen_offsets[chessman_hyphen_type];
    };
    of_hyphen_specified_hyphen_type_question_ = function(type) {
      return function(chessman) {
        v.vow_hyphen_type(type);
        v.vow_hyphen_chessman(chessman);
        return _.match(type)('ignoreCase')(chessman);
      };
    };
    opponent_question_ = function(_arg) {
      var color1, color2;
      color1 = _arg[0], color2 = _arg[1];
      v.vow_hyphen_color_hyphen_pair([color1, color2]);
      return color2 !== c.absent_hyphen_color && color2 !== color1 && color1 !== c.absent_hyphen_color;
    };
    opponent_hyphen_at_question_ = function(board, pos1) {
      return function(pos2) {
        v.vow_hyphen_board(board);
        v.vow_hyphen_all_hyphen_positions([pos1, pos2]);
        return opponent_question_(_.map(x.color_hyphen_at(board))([pos1, pos2]));
      };
    };
    opposing_hyphen_color = function(active_hyphen_color) {
      v.vow_hyphen_color(active_hyphen_color);
      if (black_question_(active_hyphen_color)) {
        return c.white;
      } else {
        return c.black;
      }
    };
    passant_hyphen_position_hyphen_set_question_ = function(passant_hyphen_position) {
      v.vow_hyphen_passant_hyphen_position(passant_hyphen_position);
      return !(passant_hyphen_position_hyphen_unset_question_(passant_hyphen_position));
    };
    passant_hyphen_position_hyphen_unset_question_ = function(passant_hyphen_position) {
      v.vow_hyphen_passant_hyphen_position(passant_hyphen_position);
      return passant_hyphen_position === c.unset_hyphen_passant_hyphen_pos;
    };
    pawn_hyphen_direction = function(color) {
      v.vow_hyphen_color(color);
      if (black_question_(color)) {
        return 1;
      } else {
        return -1;
      }
    };
    permissible_hyphen_advances = function(color) {
      return function(rank) {
        var dir, steps;
        v.vow_hyphen_color(color);
        v.vow_hyphen_bounded(rank);
        dir = pawn_hyphen_direction(color);
        steps = at_hyphen_pawn_hyphen_home_hyphen_rank_question_(color)(rank) ? [1, 2] : [1];
        return _.scale(dir)(steps);
      };
    };
    promote = function(ctx, pos) {
      return function(chessman) {
        var new_hyphen_board;
        new_hyphen_board = replace(chessman)([ctx.board, pos]);
        ctx.board = new_hyphen_board;
        return ctx;
      };
    };
    queenward_question_ = function(path) {
      v.vow_hyphen_path(path);
      return !(kingward_question_(path));
    };
    rank_hyphen_difference = function(src, tgt) {
      v.vow_hyphen_all_hyphen_positions([src, tgt]);
      return (x.rank_hyphen_of(tgt)) - (x.rank_hyphen_of(src));
    };
    replace = function(square, board, pos) {
      var board_hyphen_slice, idx, _ref;
      v.vow_hyphen_square(square);
      v.vow_hyphen_board(board);
      v.vow_hyphen_position(pos);
      _ref = [_.sliceOn(board), to_hyphen_1d(pos)], board_hyphen_slice = _ref[0], idx = _ref[1];
      return _.concat([board_hyphen_slice([0, idx]), square, board_hyphen_slice(idx + 1)]);
    };
    revoke_hyphen_castling_hyphen_right = function(revoked_hyphen_right) {
      return function(castling_hyphen_rts) {
        var replacement;
        v.vow_hyphen_castling_hyphen_right(revoked_hyphen_right);
        v.vow_hyphen_castling_hyphen_right_hyphen_set(castling_hyphen_rts);
        if (!_.match(revoked_hyphen_right)('noFlags')(castling_hyphen_rts)) {
          return castling_hyphen_rts;
        }
        replacement = _.length(castling_hyphen_rts) === 1 ? hyphen : empty_hyphen_string;
        return _.strReplace(revoked_hyphen_right)(replacement)('noFlags')(castling_hyphen_rts);
      };
    };
    same_hyphen_position_question_ = function(pos1, pos2) {
      v.vow_hyphen_all_hyphen_passant_hyphen_positions([pos1, pos2]);
      return passant_hyphen_position_hyphen_set_question_(pos2) && pos1[0] === pos2[0] && pos1[1] === pos2[1];
    };
    sort_hyphen_by_hyphen_color = function(color_hyphen_pred) {
      return function(_arg, _arg1) {
        var sq1, sq2;
        sq1 = _arg[0];
        sq2 = _arg1[0];
        return _.binaryIfBranch([color_hyphen_pred(sq1), color_hyphen_pred(sq2)])([0, -1, 1, 0]);
      };
    };
    to_hyphen_1d = x.to_hyphen_1d;
    to_hyphen_2d = function(idx) {
      return [_.floor(idx / 8), idx % 8];
    };
    transparent_question_ = function(color) {
      v.vow_hyphen_color(color);
      return color === c.absent_hyphen_color;
    };
    unallied_question_ = function(colors) {
      v.vow_hyphen_color_hyphen_pair(colors);
      return colors[0] !== colors[1] && _.notBoth(transparent_question_)(colors);
    };
    return {
      ally_question_: ally_question_,
      available_question_: available_question_,
      black_question_: black_question_,
      castling_hyphen_matcher: castling_hyphen_matcher,
      chessman_hyphen_black_question_: chessman_hyphen_black_question_,
      chessman_hyphen_white_question_: chessman_hyphen_white_question_,
      empty_question_: empty_question_,
      empty_hyphen_at_question_: empty_hyphen_at_question_,
      en_hyphen_passant_hyphen_attack_hyphen_permitted_question_: en_hyphen_passant_hyphen_attack_hyphen_permitted_question_,
      file_hyphen_difference: file_hyphen_difference,
      inessent_question_: inessent_question_,
      king_hyphen_position: king_hyphen_position,
      kingside_question_: kingside_question_,
      kingward_question_: kingward_question_,
      motion_question_: motion_question_,
      not_hyphen_at_question_: not_hyphen_at_question_,
      occupied_question_: occupied_question_,
      offsets_hyphen_for: offsets_hyphen_for,
      of_hyphen_color_question_: of_hyphen_color_question_,
      of_hyphen_specified_hyphen_type_question_: of_hyphen_specified_hyphen_type_question_,
      opponent_question_: opponent_question_,
      opposing_hyphen_color: opposing_hyphen_color,
      passant_hyphen_position_hyphen_set_question_: passant_hyphen_position_hyphen_set_question_,
      passant_hyphen_position_hyphen_unset_question_: passant_hyphen_position_hyphen_unset_question_,
      pawn_hyphen_direction: pawn_hyphen_direction,
      permissible_hyphen_advances: permissible_hyphen_advances,
      promote: promote,
      queenward_question_: queenward_question_,
      rank_hyphen_difference: rank_hyphen_difference,
      replace: replace,
      revoke_hyphen_castling_hyphen_right: revoke_hyphen_castling_hyphen_right,
      same_hyphen_position_question_: same_hyphen_position_question_,
      sort_hyphen_by_hyphen_color: sort_hyphen_by_hyphen_color,
      to_hyphen_1d: to_hyphen_1d,
      to_hyphen_2d: to_hyphen_2d,
      transparent_question_: transparent_question_,
      unallied_question_: unallied_question_
    };
  });

}).call(this);
