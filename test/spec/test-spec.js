// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'jFns', 'constants', 'types', 'extractors', 'assertions'], function(_, j, c, y, x, v) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_satisfies, each_hyphen_throws, gen_hyphen_pred_hyphen_guards, implement_hyphen_specs, implement_hyphen_specs2, implement_hyphen_specs3, satisfies, t, test_hyphen_predicate, test_hyphen_spec, test_hyphen_throwing_hyphen_transformation, test_hyphen_transformation, throws, to_hyphen_be, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_true, to_hyphen_equal, to_hyphen_throw, xdescr, xt;
    descr = j.descr, xdescr = j.xdescr, t = j.t, xt = j.xt, test_hyphen_spec = j.test_hyphen_spec, to_hyphen_throw = j.to_hyphen_throw, to_hyphen_be = j.to_hyphen_be, to_hyphen_equal = j.to_hyphen_equal, to_hyphen_be_hyphen_true = j.to_hyphen_be_hyphen_true, to_hyphen_be_hyphen_false = j.to_hyphen_be_hyphen_false, satisfies = j.satisfies, contravenes = j.contravenes, throws = j.throws, each_hyphen_satisfies = j.each_hyphen_satisfies, each_hyphen_contravenes = j.each_hyphen_contravenes, each_hyphen_throws = j.each_hyphen_throws, to_hyphen_be_hyphen_fn = j.to_hyphen_be_hyphen_fn, test_hyphen_predicate = j.test_hyphen_predicate, test_hyphen_transformation = j.test_hyphen_transformation, test_hyphen_throwing_hyphen_transformation = j.test_hyphen_throwing_hyphen_transformation, gen_hyphen_pred_hyphen_guards = j.gen_hyphen_pred_hyphen_guards, implement_hyphen_specs = j.implement_hyphen_specs, implement_hyphen_specs2 = j.implement_hyphen_specs2, implement_hyphen_specs3 = j.implement_hyphen_specs3;
    describe('test description', function() {
      return it('test spec', function() {
        return expect(5).toEqual(5);
      });
    });
    descr('test description2')(function() {
      return t('test spec')(function() {
        return to_hyphen_equal(5)(5);
      });
    });
    descr('test constants.cough')(function() {
      t('test c.bishop')(function() {
        return to_hyphen_equal('bishop')(c.bishop);
      });
      return t('test c.empty-square')(function() {
        return to_hyphen_equal('-')(c.empty_hyphen_square);
      });
    });
    descr('test types.cough')(function() {
      t('test y.empty?')(function() {
        return satisfies(y.empty_question_)(c.empty_hyphen_square);
      });
      t('test y.color?')(function() {
        return satisfies(y.color_question_)('w');
      });
      return t('test y.bounded?')(function() {
        return satisfies(y.bounded_question_)(5);
      });
    });
    descr('test assertions.cough')(function() {
      return t('test v.vow-path')(function() {
        return to_hyphen_throw(v.vow_hyphen_path)([1, 2, 3]);
      });
    });
    return descr('test extractors.cough')(function() {
      var bd, chart, ctx, passant, path, rts, setting, src, tgt;
      bd = '--------------------Q-------------------------------------------';
      rts = 'KQ';
      passant = '-';
      ctx = {
        board: bd,
        castlingRights: rts,
        passantPosition: passant
      };
      src = [2, 4];
      tgt = [5, 4];
      path = [tgt, src];
      chart = [ctx, path];
      t('test v.vow-board')(function() {
        var fn;
        fn = v.vow_hyphen_board;
        to_hyphen_throw(fn)(ctx);
        return to_hyphen_equal(bd)(fn(bd));
      });
      t('test v.vow-bounded')(function() {
        var fn;
        fn = v.vow_hyphen_bounded;
        to_hyphen_throw(fn)(10);
        return to_hyphen_equal(4)(fn(4));
      });
      t('test v.castling-right')(function() {
        var fn;
        fn = v.vow_hyphen_castling_hyphen_right;
        to_hyphen_throw(fn)('X');
        return to_hyphen_equal('K')(fn('K'));
      });
      t('test v.castling-righ-set')(function() {
        var fn;
        fn = v.vow_hyphen_castling_hyphen_right_hyphen_set;
        to_hyphen_throw(fn)('KQxkq');
        return to_hyphen_equal('KQk')(fn('KQk'));
      });
      t('test v.chart')(function() {
        var fn;
        fn = v.vow_hyphen_chart;
        to_hyphen_throw(fn)(bd);
        return to_hyphen_equal(chart)(fn(chart));
      });
      t('test v.vow-chessman')(function() {
        var fn;
        fn = v.vow_hyphen_chessman;
        to_hyphen_throw(fn)('X');
        return to_hyphen_equal(c.white_hyphen_knight)(fn(c.white_hyphen_knight));
      });
      t('test v.vow-chessman-type')(function() {
        var fn;
        fn = v.vow_hyphen_chessman_hyphen_type;
        to_hyphen_throw(fn)(c.white_hyphen_knight);
        return to_hyphen_equal(c.knight)(fn(c.knight));
      });
      t('test v.vow-color')(function() {
        var fn;
        fn = v.vow_hyphen_color;
        to_hyphen_throw(fn)('x');
        return to_hyphen_equal(c.white)(fn(c.white));
      });
      t('test v.vow-color-pair')(function() {
        var color_hyphen_pair, fn;
        fn = v.vow_hyphen_color_hyphen_pair;
        to_hyphen_throw(fn)(['x', c.white]);
        color_hyphen_pair = [c.white, c.black];
        return to_hyphen_equal(color_hyphen_pair)(fn(color_hyphen_pair));
      });
      t('test v.vow-context')(function() {
        var fn;
        fn = v.vow_hyphen_context;
        to_hyphen_throw(fn)(bd);
        return to_hyphen_equal(ctx)(fn(ctx));
      });
      t('test v.vow-index')(function() {
        var fn;
        fn = v.vow_hyphen_index;
        to_hyphen_throw(fn)(100);
        return to_hyphen_equal(62)(fn(62));
      });
      return setting = [bd, src];
    });
  });

}).call(this);
