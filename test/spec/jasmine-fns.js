// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash'], function(_) {
    var gen_hyphen_pred_hyphen_specs, j, jasmine_hyphen_fns, manage_hyphen_subset;
    j = jasmine_hyphen_fns = {};
    j.descr = function(a1) {
      return function(a2) {
        return describe(a1, a2);
      };
    };
    j.xdescr = function(a1) {
      return function(a2) {
        return xdescribe(a1, a2);
      };
    };
    j.t = function(a1) {
      return function(a2) {
        return it(a1, a2);
      };
    };
    j.xt = function(a1) {
      return function(a2) {
        return xit(a1, a2);
      };
    };
    j.test_hyphen_spec = function(spec) {
      return function(message) {
        return function(element) {
          return it(message, (function() {
            return spec(element);
          }));
        };
      };
    };
    j.to_hyphen_throw = function(fn) {
      return function(arg) {
        return expect(fn.bind(null, arg)).toThrow();
      };
    };
    j.to_hyphen_be = function(actual) {
      return function(expected) {
        return expect(expected).toBe(actual);
      };
    };
    j.to_hyphen_equal = function(actual) {
      return function(expected) {
        return expect(expected).toEqual(actual);
      };
    };
    j.to_hyphen_be_hyphen_true = function(expected) {
      return expect(expected).toEqual(true);
    };
    j.to_hyphen_be_hyphen_false = function(expected) {
      return expect(expected).toEqual(false);
    };
    j.satisfies = function(predicate) {
      return function(input) {
        return expect(predicate(input)).toEqual(true);
      };
    };
    j.contravenes = function(predicate) {
      return function(input) {
        return expect(predicate(input)).toEqual(false);
      };
    };
    j.throws = function(predicate) {
      return function(input) {
        return j.to_hyphen_throw(predicate)(input);
      };
    };
    j.each_hyphen_satisfies = function(predicate) {
      return function(inputs) {
        return _.each(j.satisfies(predicate))(inputs);
      };
    };
    j.each_hyphen_contravenes = function(predicate) {
      return function(inputs) {
        return _.each(j.contravenes(predicate))(inputs);
      };
    };
    j.each_hyphen_throws = function(fn) {
      return function(inputs) {
        return _.each(j.to_hyphen_throw(fn))(inputs);
      };
    };
    j.to_hyphen_be_hyphen_fn = function(expected) {
      return expect(expected).toEqual(jasmine.any(Function));
    };
    manage_hyphen_subset = function(spec) {
      return function(message) {
        return function(element_hyphen_set) {
          var test_hyphen_spec;
          test_hyphen_spec = j.test_hyphen_spec(spec);
          if (_.isArray(message)) {
            if (!_.empty(message)) {
              return _.zipEach2(test_hyphen_spec)(message)(element_hyphen_set);
            }
          } else {
            return test_hyphen_spec(message)(element_hyphen_set);
          }
        };
      };
    };
    gen_hyphen_pred_hyphen_specs = function(predicate) {
      return _.mapOnto([j.satisfies, j.contravenes, j.throws])(predicate);
    };
    j.gen_hyphen_pred_hyphen_guards = function(predicate) {
      return _.map(_.each)(gen_hyphen_pred_hyphen_specs(predicate));
    };
    j.test_hyphen_predicate = function(predicate) {
      return function(messages) {
        return function(element_hyphen_sets) {
          var guards;
          guards = j.gen_hyphen_pred_hyphen_guards(predicate);
          _.vowFull(messages);
          _.vowAllAry(element_hyphen_sets);
          return _.zipEach(manage_hyphen_subset)([guards, messages, element_hyphen_sets]);
        };
      };
    };
    j.test_hyphen_transformation = function(fn) {
      return function(results) {
        return function(inputs) {
          return j.to_hyphen_equal(results)(_.map(fn)(inputs));
        };
      };
    };
    j.test_hyphen_throwing_hyphen_transformation = function(fn) {
      return _.mapOnto([j.test_hyphen_transformation, j.each_hyphen_throws])(fn);
    };
    j.implement_hyphen_specs = function(specs) {
      var fn_hyphen_helper;
      fn_hyphen_helper = function(msg) {
        return function(spec) {
          return function(arg_hyphen_set) {
            return it(msg, (function() {
              return _.apply(spec)(arg_hyphen_set);
            }));
          };
        };
      };
      return _.eachApply(fn_hyphen_helper)(specs);
    };
    j.implement_hyphen_specs2 = function(messages) {
      return function(specs) {
        return function(element_hyphen_sets) {
          var fn_hyphen_helper;
          fn_hyphen_helper = function(msg) {
            return function(spec) {
              return function(arg_hyphen_set) {
                return it(msg, (function() {
                  return _.apply(spec)(arg_hyphen_set);
                }));
              };
            };
          };
          return _.zipEach(fn_hyphen_helper)([messages, specs, element_hyphen_sets]);
        };
      };
    };
    j.implement_hyphen_specs3 = function(msgs) {
      return function(specs) {
        return function(elements) {
          var fn_hyphen_helper;
          elements = _.transpose(elements);
          fn_hyphen_helper = function(msg) {
            return function(spec) {
              return function(arg_hyphen_set) {
                return it(msg, (function() {
                  return _.zipEach(spec)(arg_hyphen_set);
                }));
              };
            };
          };
          return _.zipEach(fn_hyphen_helper)([msgs, specs, elements]);
        };
      };
    };
    return j;
  });

}).call(this);
