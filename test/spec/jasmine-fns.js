// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash'], function(_) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_fn_hyphen_result_hyphen_equals, each_hyphen_satisfies, each_hyphen_throws, gen_hyphen_pred_hyphen_guards, gen_hyphen_pred_hyphen_specs, manage_hyphen_subset, satisfies, t, test_hyphen_spec, throws, to_hyphen_be, to_hyphen_be_hyphen_array, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_nbr, to_hyphen_be_hyphen_string, to_hyphen_be_hyphen_true, to_hyphen_equal, to_hyphen_have_hyphen_length, to_hyphen_throw, xdescr, xt;
    descr = function(a1) {
      return function(a2) {
        return describe(a1, a2);
      };
    };
    xdescr = function(a1) {
      return function(a2) {
        return xdescribe(a1, a2);
      };
    };
    t = function(a1) {
      return function(a2) {
        return it(a1, a2);
      };
    };
    xt = function(a1) {
      return function(a2) {
        return xit(a1, a2);
      };
    };
    test_hyphen_spec = function(spec) {
      return function(message) {
        return function(element) {
          return it(message, (function() {
            return spec(element);
          }));
        };
      };
    };
    to_hyphen_throw = function(fn) {
      return function(arg) {
        return expect(fn.bind(null, arg)).toThrow();
      };
    };
    to_hyphen_be = function(actual) {
      return function(expected) {
        return expect(expected).toBe(actual);
      };
    };
    to_hyphen_equal = function(actual) {
      return function(expected) {
        return expect(expected).toEqual(actual);
      };
    };
    to_hyphen_be_hyphen_true = function(expected) {
      return expect(expected).toEqual(true);
    };
    to_hyphen_be_hyphen_false = function(expected) {
      return expect(expected).toEqual(false);
    };
    satisfies = function(predicate) {
      return function(input) {
        return expect(predicate(input)).toEqual(true);
      };
    };
    contravenes = function(predicate) {
      return function(input) {
        return expect(predicate(input)).toEqual(false);
      };
    };
    throws = function(predicate) {
      return function(input) {
        return to_hyphen_throw(predicate)(input);
      };
    };
    each_hyphen_satisfies = function(predicate) {
      return function(inputs) {
        return _.each(satisfies(predicate))(inputs);
      };
    };
    each_hyphen_contravenes = function(predicate) {
      return function(inputs) {
        return _.each(contravenes(predicate))(inputs);
      };
    };
    each_hyphen_throws = function(fn) {
      return function(inputs) {
        return _.each(to_hyphen_throw(fn))(inputs);
      };
    };
    to_hyphen_be_hyphen_fn = function(expected) {
      return expect(expected).toEqual(jasmine.any(Function));
    };
    manage_hyphen_subset = function(spec) {
      return function(message) {
        return function(element_hyphen_set) {
          test_hyphen_spec = test_hyphen_spec(spec);
          if (_.isArray(message)) {
            if (!_.empty(message)) {
              return _.zipEach2(test_hyphen_spec)(message)(element_hyphen_set);
            }
          } else {
            return test_hyphen_spec(message)(element_hyphen_set);
          }
        };
      };
    };
    gen_hyphen_pred_hyphen_specs = function(predicate) {
      return _.mapOnto([satisfies, contravenes, throws])(predicate);
    };
    gen_hyphen_pred_hyphen_guards = function(predicate) {
      return _.map(_.each)(gen_hyphen_pred_hyphen_specs(predicate));
    };
    to_hyphen_be_hyphen_array = function(val) {
      return to_hyphen_equal(jasmine.any(Array))(val);
    };
    to_hyphen_be_hyphen_string = function(val) {
      return to_hyphen_equal(jasmine.any(String))(val);
    };
    to_hyphen_be_hyphen_nbr = function(val) {
      return to_hyphen_equal(jasmine.any(Number))(val);
    };
    to_hyphen_have_hyphen_length = function(length) {
      return function(val) {
        return to_hyphen_equal(length)(_.length(val));
      };
    };
    each_hyphen_fn_hyphen_result_hyphen_equals = function(expected) {
      return function(fn) {
        return function(val) {
          return _.each(function(val) {
            return to_hyphen_equal(expected)(fn(val));
          })(val);
        };
      };
    };
    return {
      contravenes: contravenes,
      descr: descr,
      each_hyphen_contravenes: each_hyphen_contravenes,
      each_hyphen_fn_hyphen_result_hyphen_equals: each_hyphen_fn_hyphen_result_hyphen_equals,
      each_hyphen_satisfies: each_hyphen_satisfies,
      each_hyphen_throws: each_hyphen_throws,
      gen_hyphen_pred_hyphen_specs: gen_hyphen_pred_hyphen_specs,
      gen_hyphen_pred_hyphen_guards: gen_hyphen_pred_hyphen_guards,
      satisfies: satisfies,
      t: t,
      test_hyphen_spec: test_hyphen_spec,
      throws: throws,
      to_hyphen_throw: to_hyphen_throw,
      to_hyphen_be: to_hyphen_be,
      to_hyphen_equal: to_hyphen_equal,
      to_hyphen_be_hyphen_array: to_hyphen_be_hyphen_array,
      to_hyphen_be_hyphen_nbr: to_hyphen_be_hyphen_nbr,
      to_hyphen_be_hyphen_string: to_hyphen_be_hyphen_string,
      to_hyphen_be_hyphen_true: to_hyphen_be_hyphen_true,
      to_hyphen_be_hyphen_false: to_hyphen_be_hyphen_false,
      to_hyphen_be_hyphen_fn: to_hyphen_be_hyphen_fn,
      to_hyphen_have_hyphen_length: to_hyphen_have_hyphen_length,
      xdescr: xdescr,
      xt: xt
    };
  });

}).call(this);
