// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'jFns', 'specConstants', 'constants', 'constructors', 'utilities', 'king'], function(_, j, sc, c, g, u, k) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_fn_hyphen_result_hyphen_equals, each_hyphen_satisfies, each_hyphen_throws, gen_hyphen_pred_hyphen_guards, satisfies, t, test_hyphen_predicate, test_hyphen_spec, test_hyphen_throwing_hyphen_transformation, test_hyphen_transformation, throws, to_hyphen_be, to_hyphen_be_hyphen_array, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_nbr, to_hyphen_be_hyphen_true, to_hyphen_equal, to_hyphen_have_hyphen_length, to_hyphen_throw, xdescr, xt;
    descr = j.descr, xdescr = j.xdescr, t = j.t, xt = j.xt, test_hyphen_spec = j.test_hyphen_spec, to_hyphen_throw = j.to_hyphen_throw, to_hyphen_be = j.to_hyphen_be, to_hyphen_equal = j.to_hyphen_equal, to_hyphen_be_hyphen_true = j.to_hyphen_be_hyphen_true, to_hyphen_be_hyphen_false = j.to_hyphen_be_hyphen_false, satisfies = j.satisfies, contravenes = j.contravenes, throws = j.throws, each_hyphen_fn_hyphen_result_hyphen_equals = j.each_hyphen_fn_hyphen_result_hyphen_equals, each_hyphen_satisfies = j.each_hyphen_satisfies, each_hyphen_contravenes = j.each_hyphen_contravenes, each_hyphen_throws = j.each_hyphen_throws, to_hyphen_be_hyphen_array = j.to_hyphen_be_hyphen_array, to_hyphen_be_hyphen_fn = j.to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_nbr = j.to_hyphen_be_hyphen_nbr, to_hyphen_be_hyphen_array = j.to_hyphen_be_hyphen_array, to_hyphen_have_hyphen_length = j.to_hyphen_have_hyphen_length, test_hyphen_predicate = j.test_hyphen_predicate, test_hyphen_transformation = j.test_hyphen_transformation, test_hyphen_throwing_hyphen_transformation = j.test_hyphen_throwing_hyphen_transformation, gen_hyphen_pred_hyphen_guards = j.gen_hyphen_pred_hyphen_guards;
    return descr('test king.cough')(function() {
      var bd, bd3, bd4, chart1, chart2, chart2_1, ctx, factory, initial_hyphen_board, invalid_hyphen_board, invalid_hyphen_chessman, invalid_hyphen_pos, map, passant, path, pos1, pos2, pos3, rts, setting, src, tgt;
      bd = sc.boards[0];
      chart1 = sc.charts[0];
      chart2 = sc.charts[1];
      chart2_1 = sc.chart2s[0];
      ctx = sc.contexts[0];
      map = sc.maps[0];
      passant = sc.passant_hyphen_positions[0];
      path = sc.paths[0];
      pos1 = sc.positions[0];
      pos2 = sc.positions[1];
      initial_hyphen_board = sc.initial_hyphen_board;
      invalid_hyphen_board = sc.invalid_hyphen_board;
      invalid_hyphen_chessman = sc.invalid_hyphen_chessmen[0];
      invalid_hyphen_pos = sc.invalid_hyphen_positions[0];
      rts = sc.castling_hyphen_rights[0];
      setting = sc.settings[0];
      src = sc.positions[0];
      tgt = sc.positions[1];
      factory = function(src) {
        return function(bd) {
          return g.generate_hyphen_chart2({
            board: bd,
            source: src,
            castlingRights: c.no_hyphen_castling_hyphen_rts,
            passantPosition: c.unset_hyphen_passant_hyphen_pos
          });
        };
      };
      bd3 = '----k-----------------------------------------------------------';
      bd4 = '----kb-----Np---------------------------------------------------';
      pos3 = g.generate_hyphen_position(0, 4);
      t('test k.getPotentialKingAttacks')(function() {
        var fn;
        fn = k.getPotentialKingAttacks;
        return to_hyphen_equal([])(fn(bd)(pos1));
      });
      t('test k.getPotentialMoves')(function() {
        var chart3, chart4, chart5, fn, gen_hyphen_chart1, results3, results4, results5;
        fn = k.getPotentialMoves;
        gen_hyphen_chart1 = factory(pos3);
        chart3 = gen_hyphen_chart1(bd3);
        results3 = [[1, 5], [1, 4], [1, 3], [0, 5], [0, 3]];
        to_hyphen_equal(results3)(fn(chart3));
        chart4 = gen_hyphen_chart1(bd4);
        results4 = [[1, 5], [1, 3], [0, 3]];
        to_hyphen_equal(results4)(fn(chart4));
        chart5 = g.generate_hyphen_chart2({
          board: bd3,
          source: pos3,
          castlingRights: c.full_hyphen_castling_hyphen_rts,
          passantPosition: c.no_hyphen_passant_hyphen_pos
        });
        results5 = [[1, 5], [1, 4], [1, 3], [0, 5], [0, 3], [0, 2], [0, 6]];
        return to_hyphen_equal(results5)(fn(chart5));
      });
      t('test k.modifyCastlingRights')(function() {
        var bd2, fn;
        fn = k.modifyCastlingRights;
        chart1 = g.generate_hyphen_chart2({
          board: bd3,
          source: pos3,
          castlingRights: c.full_hyphen_castling_hyphen_rts,
          passantPosition: c.unset_hyphen_passant_hyphen_pos
        });
        to_hyphen_equal('KQ')(fn(chart1));
        bd2 = '------------------------------------------------------------K---';
        chart2 = g.generate_hyphen_chart2({
          board: bd2,
          source: g.generate_hyphen_position(7, 4),
          castlingRights: 'KQ',
          passantPosition: c.unset_hyphen_passant_hyphen_pos
        });
        return to_hyphen_equal(c.no_hyphen_castling_hyphen_rts)(fn(chart2));
      });
      t('test k.move')(function() {
        var bd1, bd2, bd5, chart5, fn, res1, res2, res5, src5, tgt1, tgt2, tgt5;
        fn = k.move;
        bd1 = 'r---k-----------------------------------------------------------';
        tgt1 = g.generate_hyphen_position(0, 2);
        chart1 = g.generate_hyphen_chart2({
          board: bd1,
          source: pos3,
          castlingRights: c.no_hyphen_castling_hyphen_rts,
          passantPosition: c.unset_hyphen_passant_hyphen_pos
        });
        res1 = '--kr------------------------------------------------------------';
        to_hyphen_equal(res1)(fn(chart1)(tgt1));
        bd2 = 'r---k--r--------------------------------------------------------';
        tgt2 = g.generate_hyphen_position(0, 6);
        chart2 = g.generate_hyphen_chart2({
          board: bd2,
          source: pos3,
          castlingRights: c.no_hyphen_castling_hyphen_rts,
          passantPosition: c.unset_hyphen_passant_hyphen_pos
        });
        res2 = 'r----rk---------------------------------------------------------';
        to_hyphen_equal(res2)(fn(chart2)(tgt2));
        bd5 = '------------------------------------------------------------K--R';
        src5 = g.generate_hyphen_position(7, 4);
        tgt5 = g.generate_hyphen_position(7, 6);
        chart5 = g.generate_hyphen_chart2({
          board: bd5,
          source: src5,
          castlingRights: c.no_hyphen_castling_hyphen_rts,
          passantPosition: c.unset_hyphen_passant_hyphen_pos
        });
        res5 = '-------------------------------------------------------------RK-';
        return to_hyphen_equal(res5)(fn(chart5)(tgt5));
      });
      t('test k.setPassantPosition')(function() {
        var fn;
        fn = k.setPassantPosition;
        return to_hyphen_equal(c.unset_hyphen_passant_hyphen_pos)(fn(chart2_1));
      });
      return t('test k.setPromotionPosition')(function() {
        var fn;
        fn = k.setPromotionPosition;
        return to_hyphen_equal(c.unset_hyphen_promotion_hyphen_pos)(fn(chart2_1));
      });
    });
  });

}).call(this);
