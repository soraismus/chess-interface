// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'jFns', 'specConstants', 'constants', 'piece'], function(_, j, sc, c, p) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_fn_hyphen_result_hyphen_equals, each_hyphen_satisfies, each_hyphen_throws, gen_hyphen_pred_hyphen_guards, satisfies, t, test_hyphen_predicate, test_hyphen_spec, test_hyphen_throwing_hyphen_transformation, test_hyphen_transformation, throws, to_hyphen_be, to_hyphen_be_hyphen_array, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_nbr, to_hyphen_be_hyphen_true, to_hyphen_equal, to_hyphen_have_hyphen_length, to_hyphen_throw, xdescr, xt;
    descr = j.descr, xdescr = j.xdescr, t = j.t, xt = j.xt, test_hyphen_spec = j.test_hyphen_spec, to_hyphen_throw = j.to_hyphen_throw, to_hyphen_be = j.to_hyphen_be, to_hyphen_equal = j.to_hyphen_equal, to_hyphen_be_hyphen_true = j.to_hyphen_be_hyphen_true, to_hyphen_be_hyphen_false = j.to_hyphen_be_hyphen_false, satisfies = j.satisfies, contravenes = j.contravenes, throws = j.throws, each_hyphen_fn_hyphen_result_hyphen_equals = j.each_hyphen_fn_hyphen_result_hyphen_equals, each_hyphen_satisfies = j.each_hyphen_satisfies, each_hyphen_contravenes = j.each_hyphen_contravenes, each_hyphen_throws = j.each_hyphen_throws, to_hyphen_be_hyphen_array = j.to_hyphen_be_hyphen_array, to_hyphen_be_hyphen_fn = j.to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_nbr = j.to_hyphen_be_hyphen_nbr, to_hyphen_be_hyphen_array = j.to_hyphen_be_hyphen_array, to_hyphen_have_hyphen_length = j.to_hyphen_have_hyphen_length, test_hyphen_predicate = j.test_hyphen_predicate, test_hyphen_transformation = j.test_hyphen_transformation, test_hyphen_throwing_hyphen_transformation = j.test_hyphen_throwing_hyphen_transformation, gen_hyphen_pred_hyphen_guards = j.gen_hyphen_pred_hyphen_guards;
    return descr('test piece.cough')(function() {
      var bd, chart1, chart2, chart2_1, ctx, initial_hyphen_board, invalid_hyphen_chessman, invalid_hyphen_pos, map, passant, path, pos1, pos2, rts, setting, src, tgt;
      bd = sc.boards[0];
      chart1 = sc.charts[0];
      chart2 = sc.charts[1];
      chart2_1 = sc.chart2s[0];
      ctx = sc.contexts[0];
      map = sc.maps[0];
      passant = sc.passant_hyphen_positions[0];
      path = sc.paths[0];
      pos1 = sc.positions[0];
      pos2 = sc.positions[1];
      initial_hyphen_board = sc.initial_hyphen_board;
      invalid_hyphen_chessman = sc.invalid_hyphen_chessmen[0];
      invalid_hyphen_pos = sc.invalid_hyphen_positions[0];
      rts = sc.castling_hyphen_rights[0];
      setting = sc.settings[0];
      src = sc.positions[0];
      tgt = sc.positions[1];
      t('test p.basicMove')(function() {
        var fn, result;
        fn = p.basicMove;
        result = 'rnbqkbnrppppp-pp--------------------------------PPPPPPPPRNBQKpNR';
        return to_hyphen_equal(result)(fn(chart2_1)(pos2));
      });
      t('test p.modifyCastlingRights')(function() {
        var chart3, chart4, fn;
        fn = p.modifyCastlingRights;
        chart3 = sc.chart2s[0];
        chart4 = sc.chart2s[2];
        to_hyphen_equal(c.full_hyphen_castling_hyphen_rts)(fn(chart3));
        return to_hyphen_equal(c.no_hyphen_castling_hyphen_rts)(fn(chart4));
      });
      t('test p.setPassantPosition')(function() {
        var fn;
        fn = p.setPassantPosition;
        return to_hyphen_equal(c.unset_hyphen_passant_hyphen_pos)(fn(chart2_1));
      });
      return t('test p.setPromotionPosition')(function() {
        var fn;
        fn = p.setPromotionPosition;
        return to_hyphen_equal(c.unset_hyphen_promotion_hyphen_pos)(fn(chart2_1));
      });
    });
  });

}).call(this);
