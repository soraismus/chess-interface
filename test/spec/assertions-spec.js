// Generated by CoughSyrup 0.1.0
(function() {
  define(['jFns', 'constants', 'assertions'], function(j, c, v) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_satisfies, each_hyphen_throws, gen_hyphen_pred_hyphen_guards, not_hyphen_to_hyphen_throw, satisfies, t, test_hyphen_predicate, test_hyphen_spec, test_hyphen_throwing_hyphen_transformation, test_hyphen_transformation, throws, to_hyphen_be, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_true, to_hyphen_throw, xdescr, xt;
    descr = j.descr, xdescr = j.xdescr, t = j.t, xt = j.xt, test_hyphen_spec = j.test_hyphen_spec, to_hyphen_throw = j.to_hyphen_throw, not_hyphen_to_hyphen_throw = j.not_hyphen_to_hyphen_throw, to_hyphen_be = j.to_hyphen_be, not_hyphen_to_hyphen_throw = j.not_hyphen_to_hyphen_throw, to_hyphen_be_hyphen_true = j.to_hyphen_be_hyphen_true, to_hyphen_be_hyphen_false = j.to_hyphen_be_hyphen_false, satisfies = j.satisfies, contravenes = j.contravenes, throws = j.throws, each_hyphen_satisfies = j.each_hyphen_satisfies, each_hyphen_contravenes = j.each_hyphen_contravenes, each_hyphen_throws = j.each_hyphen_throws, to_hyphen_be_hyphen_fn = j.to_hyphen_be_hyphen_fn, test_hyphen_predicate = j.test_hyphen_predicate, test_hyphen_transformation = j.test_hyphen_transformation, test_hyphen_throwing_hyphen_transformation = j.test_hyphen_throwing_hyphen_transformation, gen_hyphen_pred_hyphen_guards = j.gen_hyphen_pred_hyphen_guards;
    return descr('test assertions.cough')(function() {
      var bd, passant, path, rts, src, tgt;
      bd = '--------------------Q-------------------------------------------';
      rts = c.full_hyphen_castling_hyphen_rts;
      passant = c.unset_hyphen_passant_hyphen_pos;
      src = [2, 4];
      tgt = [5, 4];
      path = [tgt, src];
      t('test v.vow-board')(function() {
        var fn;
        fn = v.vow_hyphen_board;
        to_hyphen_throw(fn)({});
        return not_hyphen_to_hyphen_throw(fn)(bd);
      });
      t('test v.vow-bounded')(function() {
        var fn;
        fn = v.vow_hyphen_bounded;
        to_hyphen_throw(fn)(10);
        return not_hyphen_to_hyphen_throw(fn)(4);
      });
      t('test v.castling-right')(function() {
        var fn;
        fn = v.vow_hyphen_castling_hyphen_right;
        to_hyphen_throw(fn)('X');
        return not_hyphen_to_hyphen_throw(fn)('K');
      });
      t('test v.castling-righ-set')(function() {
        var fn;
        fn = v.vow_hyphen_castling_hyphen_right_hyphen_set;
        to_hyphen_throw(fn)('KQxkq');
        return not_hyphen_to_hyphen_throw(fn)('KQk');
      });
      t('test v.vow-chessman')(function() {
        var fn;
        fn = v.vow_hyphen_chessman;
        to_hyphen_throw(fn)('X');
        return not_hyphen_to_hyphen_throw(fn)(c.white_hyphen_knight);
      });
      t('test v.vow-chessman-type')(function() {
        var fn;
        fn = v.vow_hyphen_chessman_hyphen_type;
        to_hyphen_throw(fn)(c.white_hyphen_knight);
        return not_hyphen_to_hyphen_throw(fn)(c.knight);
      });
      t('test v.vow-color')(function() {
        var fn;
        fn = v.vow_hyphen_color;
        to_hyphen_throw(fn)('x');
        return not_hyphen_to_hyphen_throw(fn)(c.white);
      });
      t('test v.vow-color-pair')(function() {
        var color_hyphen_pair, fn;
        fn = v.vow_hyphen_color_hyphen_pair;
        to_hyphen_throw(fn)(['x', c.white]);
        color_hyphen_pair = [c.white, c.black];
        return not_hyphen_to_hyphen_throw(fn)(color_hyphen_pair);
      });
      t('test v.vow-context')(function() {
        var fn, invalid_hyphen_ctx1, invalid_hyphen_ctx2, valid_hyphen_ctx;
        fn = v.vow_hyphen_context;
        invalid_hyphen_ctx1 = {
          board: 'invalid board',
          player: c.white,
          castlingRights: rts,
          passantPosition: passant
        };
        invalid_hyphen_ctx2 = {
          board: bd,
          player: c.white,
          castlingRights: rts
        };
        each_hyphen_throws(fn)([invalid_hyphen_ctx1, invalid_hyphen_ctx2]);
        valid_hyphen_ctx = {
          board: bd,
          player: c.white,
          castlingRights: rts,
          passantPosition: passant
        };
        return not_hyphen_to_hyphen_throw(fn)(valid_hyphen_ctx);
      });
      t('test v.vow-integral-pair')(function() {
        var fn, i_hyphen_pair;
        fn = v.vow_hyphen_integral_hyphen_pair;
        to_hyphen_throw(fn)([5, 5.5]);
        i_hyphen_pair = [7, 4];
        return not_hyphen_to_hyphen_throw(fn)(i_hyphen_pair);
      });
      t('test v.vow-message-when-set')(function() {
        var fn;
        fn = v.vow_hyphen_message_hyphen_when_hyphen_set;
        each_hyphen_throws(fn)([1, [], null]);
        not_hyphen_to_hyphen_throw(fn)('any string');
        return not_hyphen_to_hyphen_throw(fn)(void 0);
      });
      t('test v.vow-passant-position')(function() {
        var fn;
        fn = v.vow_hyphen_passant_hyphen_position;
        to_hyphen_throw(fn)([1, 8]);
        return not_hyphen_to_hyphen_throw(fn)(passant);
      });
      t('test v.vow-position')(function() {
        var fn;
        fn = v.vow_hyphen_position;
        to_hyphen_throw(fn)(passant);
        return not_hyphen_to_hyphen_throw(fn)(src);
      });
      t('test v.vow-promotion-position-when-set')(function() {
        var fn;
        fn = v.vow_hyphen_promotion_hyphen_position_hyphen_when_hyphen_set;
        to_hyphen_throw(fn)([1, 8]);
        not_hyphen_to_hyphen_throw(fn)(c.unset_hyphen_promotion_hyphen_pos);
        return not_hyphen_to_hyphen_throw(fn)(void 0);
      });
      t('test v.vow-square')(function() {
        var fn;
        fn = v.vow_hyphen_square;
        to_hyphen_throw(fn)('x');
        not_hyphen_to_hyphen_throw(fn)(c.empty_hyphen_square);
        return not_hyphen_to_hyphen_throw(fn)(c.black_hyphen_bishop);
      });
      return t('test v.vow-chessman-type')(function() {
        var fn;
        fn = v.vow_hyphen_chessman_hyphen_type;
        to_hyphen_throw(fn)('x');
        return not_hyphen_to_hyphen_throw(fn)(c.pawn);
      });
    });
  });

}).call(this);
