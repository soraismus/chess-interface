// Generated by CoughSyrup 0.1.0
(function() {
  define(['mydash', 'jFns', 'specConstants', 'constants', 'constructors', 'pawn'], function(_, j, sc, c, g, p) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_fn_hyphen_result_hyphen_equals, each_hyphen_satisfies, each_hyphen_throws, gen_hyphen_pred_hyphen_guards, satisfies, t, test_hyphen_predicate, test_hyphen_spec, test_hyphen_throwing_hyphen_transformation, test_hyphen_transformation, throws, to_hyphen_be, to_hyphen_be_hyphen_array, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_nbr, to_hyphen_be_hyphen_true, to_hyphen_equal, to_hyphen_have_hyphen_length, to_hyphen_throw, xdescr, xt;
    descr = j.descr, xdescr = j.xdescr, t = j.t, xt = j.xt, test_hyphen_spec = j.test_hyphen_spec, to_hyphen_throw = j.to_hyphen_throw, to_hyphen_be = j.to_hyphen_be, to_hyphen_equal = j.to_hyphen_equal, to_hyphen_be_hyphen_true = j.to_hyphen_be_hyphen_true, to_hyphen_be_hyphen_false = j.to_hyphen_be_hyphen_false, satisfies = j.satisfies, contravenes = j.contravenes, throws = j.throws, each_hyphen_fn_hyphen_result_hyphen_equals = j.each_hyphen_fn_hyphen_result_hyphen_equals, each_hyphen_satisfies = j.each_hyphen_satisfies, each_hyphen_contravenes = j.each_hyphen_contravenes, each_hyphen_throws = j.each_hyphen_throws, to_hyphen_be_hyphen_array = j.to_hyphen_be_hyphen_array, to_hyphen_be_hyphen_fn = j.to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_nbr = j.to_hyphen_be_hyphen_nbr, to_hyphen_be_hyphen_array = j.to_hyphen_be_hyphen_array, to_hyphen_have_hyphen_length = j.to_hyphen_have_hyphen_length, test_hyphen_predicate = j.test_hyphen_predicate, test_hyphen_transformation = j.test_hyphen_transformation, test_hyphen_throwing_hyphen_transformation = j.test_hyphen_throwing_hyphen_transformation, gen_hyphen_pred_hyphen_guards = j.gen_hyphen_pred_hyphen_guards;
    return descr('test pawn.cough')(function() {
      var gen_hyphen_pos, initial_hyphen_board;
      gen_hyphen_pos = g.generate_hyphen_position;
      initial_hyphen_board = sc.initial_hyphen_board;
      t('test p.getPotentialKingAttacks')(function() {
        var bd1, bd2, fn, local_hyphen_pos, res1, res2;
        fn = p.getPotentialKingAttacks;
        local_hyphen_pos = gen_hyphen_pos(1, 1);
        bd1 = '---------p------------------------------------------------------';
        res1 = [gen_hyphen_pos(2, 0), gen_hyphen_pos(2, 2)];
        to_hyphen_equal(res1)(fn(bd1, local_hyphen_pos));
        bd2 = '---------P------------------------------------------------------';
        res2 = [gen_hyphen_pos(0, 0), gen_hyphen_pos(0, 2)];
        return to_hyphen_equal(res2)(fn(bd2, local_hyphen_pos));
      });
      descr('p.getPotentialMoves')(function() {
        var fn;
        fn = p.getPotentialMoves;
        t('when a pawn is on its home rank')(function() {
          var local_hyphen_bd, local_hyphen_pos, potential_hyphen_mvs1;
          local_hyphen_bd = initial_hyphen_board;
          local_hyphen_pos = gen_hyphen_pos(1, 4);
          potential_hyphen_mvs1 = [gen_hyphen_pos(2, 4), gen_hyphen_pos(3, 4)];
          return to_hyphen_equal(potential_hyphen_mvs1)(fn(local_hyphen_bd, local_hyphen_pos, void 0, c.unset_hyphen_passant_hyphen_pos));
        });
        t('when a pawn is not on its home rank')(function() {
          var bd2, local_hyphen_pos, potential_hyphen_mvs2;
          bd2 = 'rnbqkbnrpppp-ppp------------p------P------------PPP-PPPPRNBQKBNR';
          local_hyphen_pos = gen_hyphen_pos(3, 4);
          potential_hyphen_mvs2 = [gen_hyphen_pos(4, 4), gen_hyphen_pos(4, 3)];
          return to_hyphen_equal(potential_hyphen_mvs2)(fn(bd2, local_hyphen_pos, void 0, c.unset_hyphen_passant_hyphen_pos));
        });
        return t('when the "passantPosition" field is set')(function() {
          var bd3, local_hyphen_pos, potential_hyphen_mvs3;
          bd3 = 'rnbqkbnrpppp-ppp-------------------Pp-----------PPP-PPPPRNBQKBNR';
          local_hyphen_pos = gen_hyphen_pos(4, 4);
          potential_hyphen_mvs3 = [gen_hyphen_pos(5, 4), gen_hyphen_pos(5, 3)];
          return to_hyphen_equal(potential_hyphen_mvs3)(fn(bd3, local_hyphen_pos, void 0, gen_hyphen_pos(5, 3)));
        });
      });
      t('test p.modifyCastlingRights')(function() {
        var fn;
        fn = p.modifyCastlingRights;
        to_hyphen_equal(c.full_hyphen_castling_hyphen_rts)(fn(c.full_hyphen_castling_hyphen_rts));
        return to_hyphen_equal(c.no_hyphen_castling_hyphen_rts)(fn(c.no_hyphen_castling_hyphen_rts));
      });
      t('test p.move')(function() {
        var bd2, fn, res2, result, src1, src2, tgt1, tgt2;
        fn = p.move;
        result = 'rnbqkbnrppppp-pp--------------------------------PPPPPPPPRNBQKpNR';
        src1 = gen_hyphen_pos(1, 5);
        tgt1 = gen_hyphen_pos(7, 5);
        to_hyphen_equal(result)(fn(initial_hyphen_board, src1, void 0, c.unset_hyphen_passant_hyphen_pos)(tgt1));
        bd2 = 'rnbqkbnr-ppppppp----------------pP--------------P-PPPPPPRNBQKBNR';
        src2 = gen_hyphen_pos(4, 0);
        tgt2 = gen_hyphen_pos(5, 1);
        res2 = 'rnbqkbnr-ppppppp-------------------------p------P-PPPPPPRNBQKBNR';
        return to_hyphen_equal(res2)(fn(bd2, src2, void 0, tgt2)(tgt2));
      });
      t('test p.setPassantPosition')(function() {
        var expected_hyphen_passant, fn, src, tgt, tgt2;
        fn = p.setPassantPosition;
        src = gen_hyphen_pos(1, 4);
        tgt = gen_hyphen_pos(3, 4);
        tgt2 = expected_hyphen_passant = gen_hyphen_pos(2, 4);
        to_hyphen_equal(expected_hyphen_passant)(fn(c.black, src, tgt));
        return to_hyphen_equal(c.unset_hyphen_passant_hyphen_pos)(fn(c.black, src, tgt2));
      });
      return descr('p.setPromotionPosition')(function() {
        var fn;
        fn = p.setPromotionPosition;
        t('when a pawn reaches the home rank of its opponents')(function() {
          var tgt;
          tgt = gen_hyphen_pos(7, 0);
          return to_hyphen_equal(tgt)(fn(c.black, tgt));
        });
        return t('when a pawn does not reach its opponents\' home rank')(function() {
          var tgt;
          tgt = gen_hyphen_pos(6, 0);
          return to_hyphen_equal(c.unset_hyphen_promotion_hyphen_pos)(fn(c.black, tgt));
        });
      });
    });
  });

}).call(this);
