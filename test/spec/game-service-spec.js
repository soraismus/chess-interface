// Generated by CoughSyrup 0.1.0
(function() {
  define(['jFns', 'specConstants', 'constants', 'constructors', 'types', 'game-service'], function(j, sc, c, g, y, gs) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_satisfies, each_hyphen_throws, satisfies, t, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_true, to_hyphen_equal, to_hyphen_throw, xdescr, xt;
    descr = j.descr, xdescr = j.xdescr, t = j.t, xt = j.xt, to_hyphen_throw = j.to_hyphen_throw, to_hyphen_equal = j.to_hyphen_equal, to_hyphen_be_hyphen_true = j.to_hyphen_be_hyphen_true, to_hyphen_be_hyphen_false = j.to_hyphen_be_hyphen_false, satisfies = j.satisfies, contravenes = j.contravenes, each_hyphen_satisfies = j.each_hyphen_satisfies, each_hyphen_contravenes = j.each_hyphen_contravenes, each_hyphen_throws = j.each_hyphen_throws;
    return descr('test game-service.cough')(function() {
      var KQkq, Kkq, bd1, bd10, bd11, bd12, bd13, bd14, bd15, bd2, bd3, bd4, bd5, bd6, bd7, bd8, bd9, black, gen_hyphen_pos, no_hyphen_pass, no_hyphen_prom, no_hyphen_rts, pos0_hyphen_0, pos0_hyphen_3, pos0_hyphen_4, pos1_hyphen_4, pos2_hyphen_3, pos2_hyphen_4, pos2_hyphen_6, pos3_hyphen_4, pos5_hyphen_1, pos5_hyphen_2, pos7_hyphen_1, pos7_hyphen_3, pos7_hyphen_4, pos7_hyphen_6, white;
      gen_hyphen_pos = g.generate_hyphen_position;
      black = c.black;
      white = c.white;
      no_hyphen_rts = c.no_hyphen_castling_hyphen_rts;
      no_hyphen_pass = c.unset_hyphen_passant_hyphen_pos;
      no_hyphen_prom = c.unset_hyphen_promotion_hyphen_pos;
      KQkq = 'KQkq';
      Kkq = 'Kkq';
      bd1 = sc.initial_hyphen_board;
      bd2 = '---q-------------------------------------------------------K----';
      bd3 = '----k-------------------------------------------------------K---';
      bd4 = '--------P---------------------------------------p--------N------';
      bd13 = '-------k---------------------------------------------PPP--r----K';
      bd14 = 'r-bqkb-rpppp-Qpp--n--n------p-----B-P-----------PPPP-PPPRNB-K-NR';
      bd15 = '--------b-k-----K------rPp--------------------------------------';
      bd5 = 'r---k--r------------------------------------------------R---K--R';
      bd6 = '--kr---r------------------------------------------------R---K--R';
      bd7 = 'r----rk-------------------------------------------------R---K--R';
      bd8 = 'r---k--r--------------------------------------------------KR---R';
      bd9 = 'r---k--r------------------------------------------------R----RK-';
      bd10 = '------------------------------pPpP------------------------------';
      bd11 = '------------------------------pP---------p----------------------';
      bd12 = '----------------------P---------pP------------------------------';
      pos0_hyphen_0 = gen_hyphen_pos(0, 0);
      pos0_hyphen_3 = gen_hyphen_pos(0, 3);
      pos0_hyphen_4 = gen_hyphen_pos(0, 4);
      pos1_hyphen_4 = gen_hyphen_pos(1, 4);
      pos2_hyphen_3 = gen_hyphen_pos(2, 3);
      pos2_hyphen_4 = gen_hyphen_pos(2, 4);
      pos2_hyphen_6 = gen_hyphen_pos(2, 6);
      pos3_hyphen_4 = gen_hyphen_pos(3, 4);
      pos5_hyphen_1 = gen_hyphen_pos(5, 1);
      pos5_hyphen_2 = gen_hyphen_pos(5, 2);
      pos7_hyphen_1 = gen_hyphen_pos(7, 1);
      pos7_hyphen_3 = gen_hyphen_pos(7, 3);
      pos7_hyphen_4 = gen_hyphen_pos(7, 4);
      pos7_hyphen_6 = gen_hyphen_pos(7, 6);
      t('test gs.checkmate?')(function() {
        var fn;
        fn = gs.checkmate_question_;
        to_hyphen_be_hyphen_true(fn(bd13, no_hyphen_pass, white));
        to_hyphen_be_hyphen_false(fn(bd13, no_hyphen_pass, black));
        to_hyphen_be_hyphen_true(fn(bd14, no_hyphen_pass, black));
        to_hyphen_be_hyphen_false(fn(bd14, no_hyphen_pass, white));
        to_hyphen_be_hyphen_false(fn(bd1, no_hyphen_pass, black));
        return to_hyphen_be_hyphen_false(fn(bd15, gen_hyphen_pos(2, 1), white));
      });
      t('test gs.getPotentialKingAttacks')(function() {
        var fn, res1, res2;
        fn = gs.getPotentialKingAttacks;
        res1 = [gen_hyphen_pos(2, 3), gen_hyphen_pos(2, 5)];
        to_hyphen_equal(res1)(fn(bd1, pos1_hyphen_4, no_hyphen_rts));
        res2 = [gen_hyphen_pos(5, 2), gen_hyphen_pos(5, 0)];
        return to_hyphen_equal(res2)(fn(bd1, pos7_hyphen_1, no_hyphen_rts));
      });
      t('test gs.getPotentialMoves')(function() {
        var fn, res1;
        fn = gs.getPotentialMoves;
        res1 = [gen_hyphen_pos(1, 4), gen_hyphen_pos(2, 5), gen_hyphen_pos(3, 6), gen_hyphen_pos(4, 7), gen_hyphen_pos(1, 3), gen_hyphen_pos(2, 3), gen_hyphen_pos(3, 3), gen_hyphen_pos(4, 3), gen_hyphen_pos(5, 3), gen_hyphen_pos(6, 3), gen_hyphen_pos(7, 3), gen_hyphen_pos(1, 2), gen_hyphen_pos(2, 1), gen_hyphen_pos(3, 0), gen_hyphen_pos(0, 4), gen_hyphen_pos(0, 5), gen_hyphen_pos(0, 6), gen_hyphen_pos(0, 7), gen_hyphen_pos(0, 2), gen_hyphen_pos(0, 1), gen_hyphen_pos(0, 0)];
        return to_hyphen_equal(res1)(fn(bd2, pos0_hyphen_3, no_hyphen_rts, no_hyphen_pass, c.queen));
      });
      t('test gs.in-check?')(function() {
        var fn;
        fn = gs.in_hyphen_check_question_;
        to_hyphen_be_hyphen_false(fn(bd1, black));
        to_hyphen_be_hyphen_false(fn(bd1, white));
        to_hyphen_be_hyphen_false(fn(bd13, black));
        to_hyphen_be_hyphen_true(fn(bd13, white));
        to_hyphen_be_hyphen_true(fn(bd14, black));
        return to_hyphen_be_hyphen_false(fn(bd14, white));
      });
      t('test gs.king-position-for')(function() {
        var fn;
        fn = gs.king_hyphen_position_hyphen_for;
        to_hyphen_equal(pos0_hyphen_4)(fn(bd3, black));
        to_hyphen_equal(pos7_hyphen_4)(fn(bd3, white));
        return to_hyphen_equal(pos7_hyphen_6)(fn(bd9, white));
      });
      t('test gs.modifyCastlingRights')(function() {
        var fn;
        fn = gs.modifyCastlingRights;
        to_hyphen_equal(Kkq)(fn(bd1, pos0_hyphen_3, Kkq));
        return to_hyphen_equal('kq')(fn(bd3, gen_hyphen_pos(7, 4), Kkq));
      });
      t('test gs.move')(function() {
        var fn;
        fn = gs.move;
        to_hyphen_equal(bd6)(fn(bd5, pos0_hyphen_4, no_hyphen_pass)(gen_hyphen_pos(0, 2)));
        to_hyphen_equal(bd7)(fn(bd5, pos0_hyphen_4, no_hyphen_pass)(gen_hyphen_pos(0, 6)));
        to_hyphen_equal(bd8)(fn(bd5, pos7_hyphen_4, no_hyphen_pass)(gen_hyphen_pos(7, 2)));
        to_hyphen_equal(bd9)(fn(bd5, pos7_hyphen_4, no_hyphen_pass)(pos7_hyphen_6));
        to_hyphen_equal(bd11)(fn(bd10, gen_hyphen_pos(4, 0), pos5_hyphen_1)(pos5_hyphen_1));
        return to_hyphen_equal(bd12)(fn(bd10, gen_hyphen_pos(3, 7), pos2_hyphen_6)(pos2_hyphen_6));
      });
      t('test gs.move-legal?')(function() {
        var fn, move_hyphen_legal_question_;
        fn = gs.move_hyphen_legal_question_;
        move_hyphen_legal_question_ = function(src) {
          return function(tgt) {
            return fn(bd1, src, no_hyphen_rts, no_hyphen_pass)(tgt);
          };
        };
        to_hyphen_be_hyphen_true(move_hyphen_legal_question_(pos1_hyphen_4)(pos3_hyphen_4));
        to_hyphen_be_hyphen_false(move_hyphen_legal_question_(pos1_hyphen_4)(pos2_hyphen_3));
        to_hyphen_be_hyphen_true(move_hyphen_legal_question_(pos7_hyphen_1)(pos5_hyphen_2));
        to_hyphen_be_hyphen_false(move_hyphen_legal_question_(pos0_hyphen_3)(pos7_hyphen_3));
        return to_hyphen_be_hyphen_true(fn(bd2, pos0_hyphen_3, no_hyphen_rts, no_hyphen_pass)(pos7_hyphen_3));
      });
      t('test gs.query-game-service')(function() {
        var b10, b2, b3, b4, b5, b6, b7, b8, b9, c2, ctx1, fn, gen_hyphen_resp, pass2, pass3, res1, res2, res3, res4, res5, res6, res7, res8, res9, resp10, resp2, resp3, resp4, resp5, resp6, resp7, resp8, resp9;
        fn = gs.query_hyphen_game_hyphen_service;
        gen_hyphen_resp = function(board, player, castlingRights, passantPosition, arg5) {
          var resp;
          resp = {
            board: board,
            player: player,
            castlingRights: castlingRights,
            passantPosition: passantPosition
          };
          if (y.promotion_hyphen_position_question_(arg5)) {
            resp.promotionPosition = arg5;
          } else {
            resp.promotionPosition = no_hyphen_prom;
            resp.message = arg5;
          }
          return resp;
        };
        ctx1 = g.generate_hyphen_context(bd1, white, KQkq, no_hyphen_pass);
        b2 = 'rnbqkbnrpppppppp--------------------P-----------PPPP-PPPRNBQKBNR';
        pass2 = gen_hyphen_pos(5, 4);
        resp2 = gen_hyphen_resp(b2, black, KQkq, pass2, no_hyphen_prom);
        res1 = fn(ctx1, gen_hyphen_pos(6, 4), gen_hyphen_pos(4, 4));
        to_hyphen_equal(resp2)(res1);
        b3 = 'rnbqkbnrpppp-ppp------------p-------P-----------PPPP-PPPRNBQKBNR';
        pass3 = gen_hyphen_pos(2, 4);
        resp3 = gen_hyphen_resp(b3, white, KQkq, pass3, no_hyphen_prom);
        res2 = fn(res1, gen_hyphen_pos(1, 4), gen_hyphen_pos(3, 4));
        to_hyphen_equal(resp3)(res2);
        b4 = 'rnbqkbnrpppp-ppp------------p-------P--------N--PPPP-PPPRNBQKB-R';
        resp4 = gen_hyphen_resp(b4, black, KQkq, no_hyphen_pass, no_hyphen_prom);
        res3 = fn(res2, gen_hyphen_pos(7, 6), gen_hyphen_pos(5, 5));
        to_hyphen_equal(resp4)(res3);
        resp5 = gen_hyphen_resp(b4, black, KQkq, no_hyphen_pass, 'illegal move');
        res4 = fn(res3, gen_hyphen_pos(0, 7), gen_hyphen_pos(5, 7));
        to_hyphen_equal(resp5)(res4);
        b5 = 'r-bqkbnrpppp-ppp--n---------p-------P--------N--PPPP-PPPRNBQKB-R';
        resp6 = gen_hyphen_resp(b5, white, KQkq, no_hyphen_pass, no_hyphen_prom);
        res5 = fn(res3, gen_hyphen_pos(0, 1), gen_hyphen_pos(2, 2));
        to_hyphen_equal(resp6)(res5);
        b6 = 'r-bqkbnrpppp-ppp--n------B--p-------P--------N--PPPP-PPPRNBQK--R';
        resp7 = gen_hyphen_resp(b6, black, KQkq, no_hyphen_pass, no_hyphen_prom);
        res6 = fn(res5, gen_hyphen_pos(7, 5), gen_hyphen_pos(3, 1));
        to_hyphen_equal(resp7)(res6);
        b7 = 'r-bqkb-rpppp-ppp--n--n---B--p-------P--------N--PPPP-PPPRNBQK--R';
        resp8 = gen_hyphen_resp(b7, white, KQkq, no_hyphen_pass, no_hyphen_prom);
        res7 = fn(res6, gen_hyphen_pos(0, 6), gen_hyphen_pos(2, 5));
        to_hyphen_equal(resp8)(res7);
        b8 = 'r-bqkb-rpppp-ppp--n--n---B--p-------P--------N--PPPP-PPPRNBQ-RK-';
        resp9 = gen_hyphen_resp(b8, black, 'kq', no_hyphen_pass, no_hyphen_prom);
        res8 = fn(res7, gen_hyphen_pos(7, 4), gen_hyphen_pos(7, 6));
        to_hyphen_equal(resp9)(res8);
        b9 = 'rnbqkbnrpPpppppp----------------------------------PPPPPPRNBQKBNR';
        c2 = g.generate_hyphen_context(b9, white, no_hyphen_rts, no_hyphen_pass);
        b10 = 'Pnbqkbnrp-pppppp----------------------------------PPPPPPRNBQKBNR';
        resp10 = gen_hyphen_resp(b10, black, no_hyphen_rts, no_hyphen_pass, gen_hyphen_pos(0, 0));
        res9 = fn(c2, gen_hyphen_pos(1, 1), gen_hyphen_pos(0, 0));
        return to_hyphen_equal(resp10)(res9);
      });
      t('test gs.setPassantPosition')(function() {
        var fn, to_hyphen_unset;
        fn = gs.setPassantPosition;
        to_hyphen_unset = to_hyphen_equal(no_hyphen_pass);
        to_hyphen_unset(fn(bd1, pos1_hyphen_4, pos2_hyphen_4));
        to_hyphen_unset(fn(bd2, pos0_hyphen_3, pos0_hyphen_3));
        to_hyphen_equal(pos2_hyphen_4)(fn(bd1, pos1_hyphen_4, pos3_hyphen_4));
        return to_hyphen_equal(gen_hyphen_pos(5, 7))(fn(bd1, gen_hyphen_pos(6, 7), gen_hyphen_pos(4, 7)));
      });
      t('test setPromotionPosition')(function() {
        var fn, to_hyphen_unset;
        fn = gs.setPromotionPosition;
        to_hyphen_unset = to_hyphen_equal(c.unset_hyphen_promotion_hyphen_pos);
        to_hyphen_unset(fn(bd1, pos1_hyphen_4, pos2_hyphen_4));
        to_hyphen_unset(fn(bd2, pos0_hyphen_3, pos0_hyphen_3));
        to_hyphen_equal(pos0_hyphen_0)(fn(bd4, gen_hyphen_pos(1, 0), pos0_hyphen_0));
        return to_hyphen_equal(pos7_hyphen_1)(fn(bd4, gen_hyphen_pos(6, 0), pos7_hyphen_1));
      });
      return t('test gs.vulnerable-positions-for')(function() {
        var fn, pos_hyphen_w_slash__hyphen_file_hyphen_2, pos_hyphen_w_slash__hyphen_rank_hyphen_7, res2, res3;
        fn = gs.vulnerable_hyphen_positions_hyphen_for;
        to_hyphen_equal([gen_hyphen_pos(7, 1)])(fn(bd4, white));
        res2 = [gen_hyphen_pos(0, 1), gen_hyphen_pos(6, 3), gen_hyphen_pos(5, 2), gen_hyphen_pos(5, 0)];
        to_hyphen_equal(res2)(fn(bd4, black));
        pos_hyphen_w_slash__hyphen_rank_hyphen_7 = function(file) {
          return gen_hyphen_pos(7, file);
        };
        pos_hyphen_w_slash__hyphen_file_hyphen_2 = function(rank) {
          return gen_hyphen_pos(rank, 2);
        };
        res3 = [gen_hyphen_pos(1, 7), gen_hyphen_pos(1, 6), gen_hyphen_pos(0, 6), gen_hyphen_pos(7, 3), gen_hyphen_pos(7, 4), gen_hyphen_pos(7, 5), gen_hyphen_pos(7, 6), gen_hyphen_pos(7, 7), gen_hyphen_pos(7, 1), gen_hyphen_pos(7, 0), gen_hyphen_pos(6, 2), gen_hyphen_pos(5, 2), gen_hyphen_pos(4, 2), gen_hyphen_pos(3, 2), gen_hyphen_pos(2, 2), gen_hyphen_pos(1, 2), gen_hyphen_pos(0, 2)];
        return to_hyphen_equal(res3)(fn(bd13, white));
      });
    });
  });

}).call(this);
