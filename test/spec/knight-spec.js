// Generated by CoughSyrup 0.1.0
(function() {
  define(['jFns', 'specConstants', 'constants', 'constructors', 'utilities', 'knight'], function(j, sc, c, g, u, n) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_fn_hyphen_result_hyphen_equals, each_hyphen_satisfies, each_hyphen_throws, gen_hyphen_pred_hyphen_guards, satisfies, t, test_hyphen_predicate, test_hyphen_spec, test_hyphen_throwing_hyphen_transformation, test_hyphen_transformation, throws, to_hyphen_be, to_hyphen_be_hyphen_array, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_nbr, to_hyphen_be_hyphen_true, to_hyphen_equal, to_hyphen_have_hyphen_length, to_hyphen_throw, xdescr, xt;
    descr = j.descr, xdescr = j.xdescr, t = j.t, xt = j.xt, test_hyphen_spec = j.test_hyphen_spec, to_hyphen_throw = j.to_hyphen_throw, to_hyphen_be = j.to_hyphen_be, to_hyphen_equal = j.to_hyphen_equal, to_hyphen_be_hyphen_true = j.to_hyphen_be_hyphen_true, to_hyphen_be_hyphen_false = j.to_hyphen_be_hyphen_false, satisfies = j.satisfies, contravenes = j.contravenes, throws = j.throws, each_hyphen_fn_hyphen_result_hyphen_equals = j.each_hyphen_fn_hyphen_result_hyphen_equals, each_hyphen_satisfies = j.each_hyphen_satisfies, each_hyphen_contravenes = j.each_hyphen_contravenes, each_hyphen_throws = j.each_hyphen_throws, to_hyphen_be_hyphen_array = j.to_hyphen_be_hyphen_array, to_hyphen_be_hyphen_fn = j.to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_nbr = j.to_hyphen_be_hyphen_nbr, to_hyphen_be_hyphen_array = j.to_hyphen_be_hyphen_array, to_hyphen_have_hyphen_length = j.to_hyphen_have_hyphen_length, test_hyphen_predicate = j.test_hyphen_predicate, test_hyphen_transformation = j.test_hyphen_transformation, test_hyphen_throwing_hyphen_transformation = j.test_hyphen_throwing_hyphen_transformation, gen_hyphen_pred_hyphen_guards = j.gen_hyphen_pred_hyphen_guards;
    return descr('test knight.cough')(function() {
      var bd1, bd2, bd3, gen_hyphen_pos, no_hyphen_castling_hyphen_rts, pos1, results1, results2, results3, unset_hyphen_passant_hyphen_pos;
      gen_hyphen_pos = g.generate_hyphen_position;
      no_hyphen_castling_hyphen_rts = c.no_hyphen_castling_hyphen_rts;
      unset_hyphen_passant_hyphen_pos = c.unset_hyphen_passant_hyphen_pos;
      pos1 = g.generate_hyphen_position(3, 3);
      bd1 = '---------------------------n------------------------------------';
      bd2 = '----------p-p----p---p-----n-----p---p----p---------------------';
      bd3 = '----------P-p----P---p-----n-----p---p----p---------------------';
      results1 = [[4, 5], [4, 1], [2, 5], [2, 1], [5, 4], [5, 2], [1, 4], [1, 2]];
      results2 = [[5, 4]];
      results3 = [[2, 1], [5, 4], [1, 2]];
      t('test n.getPotentialKingAttacks')(function() {
        var fn;
        fn = n.getPotentialKingAttacks;
        to_hyphen_equal(results1)(fn(bd1, pos1));
        return to_hyphen_equal(results3)(fn(bd3, pos1));
      });
      t('test n.getPotentialMoves')(function() {
        var fn;
        fn = n.getPotentialMoves;
        to_hyphen_equal(results1)(fn(bd1, pos1));
        to_hyphen_equal(results2)(fn(bd2, pos1));
        return to_hyphen_equal(results3)(fn(bd3, pos1));
      });
      t('test n.modifyCastlingRights')(function() {
        var Kkq, fn;
        fn = n.modifyCastlingRights;
        Kkq = 'Kkq';
        to_hyphen_equal(Kkq)(fn(Kkq));
        return to_hyphen_equal(no_hyphen_castling_hyphen_rts)(fn(no_hyphen_castling_hyphen_rts));
      });
      t('test n.move')(function() {
        var bd4, fn;
        fn = n.move;
        bd4 = '-n--------P-p----P---p-----------p---p----p---------------------';
        return to_hyphen_equal(bd4)(fn(bd3, pos1)(gen_hyphen_pos(0, 1)));
      });
      t('test n.setPassantPosition')(function() {
        var fn;
        fn = n.setPassantPosition;
        to_hyphen_equal(unset_hyphen_passant_hyphen_pos)(fn());
        return to_hyphen_equal(unset_hyphen_passant_hyphen_pos)(fn());
      });
      return t('test n.setPromotionPosition')(function() {
        var fn;
        fn = n.setPromotionPosition;
        return to_hyphen_equal(c.unset_hyphen_promotion_hyphen_pos)(fn());
      });
    });
  });

}).call(this);
