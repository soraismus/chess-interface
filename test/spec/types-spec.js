// Generated by CoughSyrup 0.1.0
(function() {
  define(['jFns', 'constants', 'types', 'constructors', 'specConstants'], function(j, c, y, g, sc) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_satisfies, each_hyphen_throws, satisfies, t, test_hyphen_predicate, test_hyphen_spec, throws, to_hyphen_be, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_fn, to_hyphen_be_hyphen_true, to_hyphen_equal, to_hyphen_throw, xdescr, xt;
    descr = j.descr, xdescr = j.xdescr, t = j.t, xt = j.xt, test_hyphen_spec = j.test_hyphen_spec, to_hyphen_throw = j.to_hyphen_throw, to_hyphen_be = j.to_hyphen_be, to_hyphen_equal = j.to_hyphen_equal, to_hyphen_be_hyphen_true = j.to_hyphen_be_hyphen_true, to_hyphen_be_hyphen_false = j.to_hyphen_be_hyphen_false, satisfies = j.satisfies, contravenes = j.contravenes, throws = j.throws, each_hyphen_satisfies = j.each_hyphen_satisfies, each_hyphen_contravenes = j.each_hyphen_contravenes, each_hyphen_throws = j.each_hyphen_throws, to_hyphen_be_hyphen_fn = j.to_hyphen_be_hyphen_fn, test_hyphen_predicate = j.test_hyphen_predicate;
    return descr('types.cough')(function() {
      var bd, chart, ctx, map, passant, path, pos, rts, setting, src, tgt;
      bd = sc.boards[0];
      chart = sc.charts[0];
      ctx = sc.contexts[0];
      map = sc.maps[0];
      passant = sc.passant_hyphen_positions[0];
      path = sc.paths[0];
      pos = sc.positions[0];
      rts = sc.castling_hyphen_rights[0];
      setting = sc.settings[0];
      src = sc.positions[0];
      tgt = sc.positions[1];
      t('test y.black?')(function() {
        var fn;
        fn = y.black_question_;
        satisfies(fn)(c.black);
        return each_hyphen_contravenes(fn)([c.white, c.emtpy_hyphen_square, 1, null]);
      });
      t('test y.bounded?')(function() {
        var fn;
        fn = y.bounded_question_;
        each_hyphen_satisfies(fn)([0, 1, 7]);
        each_hyphen_contravenes(fn)([-1, 8]);
        return each_hyphen_throws(fn)([[0, 0], 'a', true]);
      });
      t('test y.empty?')(function() {
        var fn;
        fn = y.empty_question_;
        satisfies(fn)(c.empty_hyphen_square);
        return each_hyphen_contravenes(fn)([c.white_hyphen_king, c.black_hyphen_knight]);
      });
      t('test y.inessent?')(function() {
        var fn;
        fn = y.inessent_question_;
        satisfies(fn)([7, 2]);
        return contravenes(fn)([0, -1]);
      });
      t('test y.board?')(function() {
        var fn, invalid_hyphen_bd;
        fn = y.board_question_;
        invalid_hyphen_bd = 'n--p--pp-----b------------------------PPPPP----KQ----';
        satisfies(fn)(bd);
        return contravenes(fn)(invalid_hyphen_bd);
      });
      t('test y.castling-right?')(function() {
        var fn;
        fn = y.castling_hyphen_right_question_;
        each_hyphen_satisfies(fn)(['K', 'Q', 'k', 'q']);
        return each_hyphen_contravenes(fn)(['x', c.no_hyphen_castling_hyphen_rts]);
      });
      t('test y.castling-right-set?')(function() {
        var fn;
        fn = y.castling_hyphen_right_hyphen_set_question_;
        each_hyphen_satisfies(fn)([c.full_hyphen_castling_hyphen_rts, 'Kkq', c.no_hyphen_castling_hyphen_rts]);
        return contravenes(fn)('x');
      });
      t('test y.chart?')(function() {
        var fn;
        fn = y.chart_question_;
        satisfies(fn)(chart);
        return contravenes(fn)(map);
      });
      t('test y.chessman?')(function() {
        var fn;
        fn = y.chessman_question_;
        each_hyphen_satisfies(fn)([c.white_hyphen_rook, c.black_hyphen_queen, c.black_hyphen_pawn]);
        return contravenes(fn)('x');
      });
      t('test y.chessman-type?')(function() {
        var fn;
        fn = y.chessman_hyphen_type_question_;
        each_hyphen_satisfies(fn)([c.rook, c.bishop, c.knight]);
        return contravenes(fn)('x');
      });
      t('test y.color?')(function() {
        var fn;
        fn = y.color_question_;
        each_hyphen_satisfies(fn)([c.white, c.black, c.absent_hyphen_color]);
        return contravenes(fn)('x');
      });
      t('test y.color-pair?')(function() {
        var fn;
        fn = y.color_hyphen_pair_question_;
        satisfies(fn)([c.white, c.black]);
        return contravenes(fn)([c.white, c.black, c.absent_hyphen_color_hyphen_pair]);
      });
      t('test y.context?')(function() {
        var fn;
        fn = y.context_question_;
        satisfies(fn)(ctx);
        return contravenes(fn)(map);
      });
      t('test y.index?')(function() {
        var fn;
        fn = y.index_question_;
        each_hyphen_satisfies(fn)(c.board_hyphen_indices);
        return each_hyphen_contravenes(fn)([100, 'x']);
      });
      t('test y.integral-pair?')(function() {
        var fn;
        fn = y.integral_hyphen_pair_question_;
        satisfies(fn)([-100, 100]);
        return each_hyphen_contravenes(fn)([[1, 2, 3], [1, 'x']]);
      });
      t('test y.king?')(function() {
        var fn;
        fn = y.king_question_;
        each_hyphen_satisfies(fn)([c.white_hyphen_king, c.black_hyphen_king]);
        return each_hyphen_contravenes(fn)([c.white_hyphen_bishop, c.black_hyphen_queen]);
      });
      t('test y.map?')(function() {
        var fn;
        fn = y.map_question_;
        satisfies(fn)(map);
        return contravenes(fn)(chart);
      });
      t('test y.pair?')(function() {
        var fn;
        fn = y.pair_question_;
        satisfies(fn)([null, void 0]);
        return contravenes(fn)([null, void 0, null]);
      });
      t('test y.passant-position?')(function() {
        var fn;
        fn = y.passant_hyphen_position_question_;
        each_hyphen_satisfies(fn)([src, tgt, c.unset_hyphen_passant_hyphen_pos]);
        return contravenes(fn)([1, 2, 3]);
      });
      t('test y.path?')(function() {
        var fn;
        fn = y.path_question_;
        satisfies(fn)(path);
        return contravenes(fn)(pos);
      });
      t('test y.pawn?')(function() {
        var fn;
        fn = y.pawn_question_;
        each_hyphen_satisfies(fn)([c.white_hyphen_pawn, c.black_hyphen_pawn]);
        return contravenes(fn)(c.black_hyphen_rook);
      });
      t('test y.player?')(function() {
        var fn;
        fn = y.player_question_;
        each_hyphen_satisfies(fn)([c.white_hyphen_player, c.black_hyphen_player]);
        return contravenes(fn)('x');
      });
      t('test y.position?')(function() {
        var fn;
        fn = y.position_question_;
        each_hyphen_satisfies(fn)([src, tgt]);
        return each_hyphen_contravenes(fn)([1, 'x', null, [1, 2, 3], path]);
      });
      t('test y.rook?')(function() {
        var fn;
        fn = y.rook_question_;
        each_hyphen_satisfies(fn)([c.white_hyphen_rook, c.black_hyphen_rook]);
        return each_hyphen_contravenes(fn)([c.white_hyphen_king, c.black_hyphen_queen]);
      });
      t('test y.setting?')(function() {
        var fn;
        fn = y.setting_question_;
        satisfies(fn)(setting);
        return each_hyphen_contravenes(fn)([bd, pos, map, chart]);
      });
      t('test y.square?')(function() {
        var fn;
        fn = y.square_question_;
        each_hyphen_satisfies(fn)([c.white_hyphen_king, c.black_hyphen_pawn, c.empty_hyphen_square]);
        return contravenes(fn)('x');
      });
      return t('test y.unset-passant-position?')(function() {
        var fn;
        fn = y.unset_hyphen_passant_hyphen_position_question_;
        satisfies(fn)(c.unset_hyphen_passant_hyphen_pos);
        return each_hyphen_contravenes(fn)([src, tgt]);
      });
    });
  });

}).call(this);
