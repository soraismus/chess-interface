// Generated by CoughSyrup 0.1.0
(function() {
  define(['jFns', 'constants', 'constructors', 'fen-service'], function(j, c, g, fs) {
    var contravenes, descr, each_hyphen_contravenes, each_hyphen_satisfies, each_hyphen_throws, satisfies, t, to_hyphen_be_hyphen_false, to_hyphen_be_hyphen_true, to_hyphen_equal, to_hyphen_throw, xdescr, xt;
    descr = j.descr, xdescr = j.xdescr, t = j.t, xt = j.xt, to_hyphen_throw = j.to_hyphen_throw, to_hyphen_equal = j.to_hyphen_equal, to_hyphen_be_hyphen_true = j.to_hyphen_be_hyphen_true, to_hyphen_be_hyphen_false = j.to_hyphen_be_hyphen_false, satisfies = j.satisfies, contravenes = j.contravenes, each_hyphen_satisfies = j.each_hyphen_satisfies, each_hyphen_contravenes = j.each_hyphen_contravenes, each_hyphen_throws = j.each_hyphen_throws;
    return descr('fen-service.cough')(function() {
      var KQkq, a1, a8, b, b2, bd1, bd2, bd3, bd4, boards, contexts, e, e4, fen_hyphen_bd1, fen_hyphen_bd2, fen_hyphen_bd3, fen_hyphen_bd4, fen_hyphen_boards, fens, gen_hyphen_ctx, gen_hyphen_pos, h1, h8, pos0_hyphen_0, pos0_hyphen_7, pos4_hyphen_4, pos6_hyphen_1, pos7_hyphen_0, pos7_hyphen_7, position_hyphen_codes, positions, unset_hyphen_code, unset_hyphen_pos, w;
      boards = [bd1 = 'rnbqkbnrpppppppp--------------------------------PPPPPPPPRNBQKBNR', bd2 = 'rnbqkbnrpppppppp--------------------P-----------PPPP-PPPRNBQKBNR', bd3 = 'rnbqkbnrpp-ppppp----------p---------P-----------PPPP-PPPRNBQKBNR', bd4 = 'rnbqkbnrpp-ppppp----------p---------P--------N--PPPP-PPPRNBQKB-R'];
      fen_hyphen_boards = [fen_hyphen_bd1 = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR', fen_hyphen_bd2 = 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR', fen_hyphen_bd3 = 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR', fen_hyphen_bd4 = 'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R'];
      position_hyphen_codes = [a1 = 'a1', h1 = 'h1', b2 = 'b2', e4 = 'e4', a8 = 'a8', h8 = 'h8', unset_hyphen_code = '-'];
      gen_hyphen_pos = g.generate_hyphen_position;
      positions = [pos7_hyphen_0 = gen_hyphen_pos(7, 0), pos7_hyphen_7 = gen_hyphen_pos(7, 7), pos6_hyphen_1 = gen_hyphen_pos(6, 1), pos4_hyphen_4 = gen_hyphen_pos(4, 4), pos0_hyphen_0 = gen_hyphen_pos(0, 0), pos0_hyphen_7 = gen_hyphen_pos(0, 7), unset_hyphen_pos = '-'];
      fens = ['rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1', 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1', 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2', 'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2'];
      gen_hyphen_ctx = function(board, player, castlingRights, passantPosition, clock, moveNumber, promotionPosition) {
        return {
          board: board,
          player: player,
          castlingRights: castlingRights,
          passantPosition: passantPosition,
          clock: clock,
          moveNumber: moveNumber,
          promotionPosition: promotionPosition
        };
      };
      w = 'w';
      b = 'b';
      KQkq = 'KQkq';
      e = '-';
      contexts = [gen_hyphen_ctx(bd1, w, KQkq, e, 0, 1, e), gen_hyphen_ctx(bd2, b, KQkq, gen_hyphen_pos(5, 4), 0, 1, e), gen_hyphen_ctx(bd3, w, KQkq, gen_hyphen_pos(2, 2), 0, 2, e), gen_hyphen_ctx(bd4, b, KQkq, e, 1, 2, e)];
      descr('#contract-board')(function() {
        return t('should express hyphen sequences as numerals and place slashes between ranks')(function() {
          var fn;
          fn = fs.contract_hyphen_board;
          return to_hyphen_equal(fen_hyphen_boards)(boards.map(fn));
        });
      });
      descr('#decode-positon-code')(function() {
        return t('should convert interpret the initial letter as the file and the second numeral as a rank')(function() {
          var fn;
          fn = fs.decode_hyphen_position_hyphen_code;
          return to_hyphen_equal(positions)(position_hyphen_codes.map(fn));
        });
      });
      descr('#decode-fen')(function() {
        return t('should convert a fen string into a context object')(function() {
          var fn;
          fn = fs.decode_hyphen_fen;
          return to_hyphen_equal(contexts)(fens.map(fn));
        });
      });
      descr('#encode-context')(function() {
        return t('should convert a context object into a fen string')(function() {
          var fn;
          fn = fs.encode_hyphen_context;
          return to_hyphen_equal(fens)(contexts.map(fn));
        });
      });
      descr('#encode-passant-position')(function() {
        return t('should create a pair of characters, the first of which is a letter converted from the file and the second of which is a numeral converted from the rank')(function() {
          var fn;
          fn = fs.encode_hyphen_passant_hyphen_position;
          return to_hyphen_equal(position_hyphen_codes)(positions.map(fn));
        });
      });
      return descr('#expand-fen-board')(function() {
        return t('should remove slashes and expand numerals into hypen sequences')(function() {
          var fn;
          fn = fs.expand_hyphen_fen_hyphen_board;
          return to_hyphen_equal(boards)(fen_hyphen_boards.map(fn));
        });
      });
    });
  });

}).call(this);
