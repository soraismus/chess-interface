define ([
  'mydash'
  'jFns'
  'specConstants'
  'constants'
  'constructors'
  'game-service'
], (_, j, sc, c, g, gs) ->

  {
    descr
    xdescr
    t
    xt
    test-spec
    to-throw
    to-be
    to-equal
    to-be-true
    to-be-false
    satisfies
    contravenes
    throws
    each-fn-result-equals
    each-satisfies
    each-contravenes
    each-throws
    to-be-array
    to-be-fn
    to-be-nbr
    to-be-array
    to-have-length
    test-predicate
    test-transformation
    test-throwing-transformation
    gen-pred-guards
  } = j

  descr 'test game-service.cough' (->

    gen-pos    = g.generate-position

    no-rts  = c.no-castling-rts
    no-pass = c.unset-passant-pos

    bd1 = sc.initial-board
    bd2 = '---q-------------------------------------------------------K----'
    bd3 = '----k-------------------------------------------------------K---'
    bd4 = '--------P---------------------------------------p--------N------'
    bd13 = '-------k---------------------------------------------PPP--r----K'
    bd14 = 'r-bqkb-rpppp-Qpp--n--n------p-----B-P-----------PPPP-PPPRNB-K-NR'

    # Castling boards
    bd5 = 'r---k--r------------------------------------------------R---K--R'
    bd6 = '--kr---r------------------------------------------------R---K--R'
    bd7 = 'r----rk-------------------------------------------------R---K--R'
    bd8 = 'r---k--r--------------------------------------------------KR---R'
    bd9 = 'r---k--r------------------------------------------------R----RK-'

    # Passant-capture boards.
    bd10 = '------------------------------pPpP------------------------------'
    bd11 = '------------------------------pP---------p----------------------'
    bd12 = '----------------------P---------pP------------------------------'

    pos0-0 = gen-pos (0, 0)
    pos0-3 = gen-pos (0, 3)
    pos0-4 = gen-pos (0, 4)
    pos1-4 = gen-pos (1, 4)
    pos2-3 = gen-pos (2, 3)
    pos2-4 = gen-pos (2, 4)
    pos2-6 = gen-pos (2, 6)
    pos3-4 = gen-pos (3, 4)
    pos5-1 = gen-pos (5, 1)
    pos5-2 = gen-pos (5, 2)
    pos7-1 = gen-pos (7, 1)
    pos7-3 = gen-pos (7, 3)
    pos7-4 = gen-pos (7, 4)
    pos7-6 = gen-pos (7, 6)

    Kkq = 'Kkq'

    t 'test gs.getPotentialKingAttacks' (->

      fn = gs.getPotentialKingAttacks

      res1 = [gen-pos (2, 3), gen-pos (2, 5)]
      to-equal res1 (fn (bd1, pos1-4, no-rts))

      res2 = [gen-pos (5, 2), gen-pos (5, 0)]
      to-equal res2 (fn (bd1, pos7-1, no-rts))

    )

    t 'test gs.getPotentialMoves' (->
      fn = gs.getPotentialMoves

      res1 = [
        # direction : [1, 1]
        gen-pos (1, 4)
        gen-pos (2, 5)
        gen-pos (3, 6)
        gen-pos (4, 7)

        # direction : [1, 0]
        gen-pos (1, 3)
        gen-pos (2, 3)
        gen-pos (3, 3)
        gen-pos (4, 3)
        gen-pos (5, 3)
        gen-pos (6, 3)
        gen-pos (7, 3)

        # direction : [1, -1]
        gen-pos (1, 2)
        gen-pos (2, 1)
        gen-pos (3, 0)

        # direction : [0, 1]
        gen-pos (0, 4)
        gen-pos (0, 5)
        gen-pos (0, 6)
        gen-pos (0, 7)

        # direction : [0, -1]
        gen-pos (0, 2)
        gen-pos (0, 1)
        gen-pos (0, 0)
      ]

      to-equal res1 (fn (
        bd2, pos0-3, no-rts, no-pass, c.queen))

    )

    t 'test gs.in-check?' (->
      fn = gs.in-check?
      to-be-false (fn (bd1,  no-rts, c.black))
      to-be-false (fn (bd1,  no-rts, c.white))
      to-be-false (fn (bd13, no-rts, c.black))
      to-be-true  (fn (bd13, no-rts, c.white))
      to-be-true  (fn (bd14, no-rts, c.black))
      to-be-false (fn (bd14, no-rts, c.white))
    )

    t 'test gs.king-position-for' (->
      fn = gs.king-position-for

      to-equal pos0-4 (fn (bd3, c.black))
      to-equal pos7-4 (fn (bd3, c.white))
      to-equal pos7-6 (fn (bd9, c.white))
      
    )

    t 'test gs.modifyCastlingRights' (->
      fn = gs.modifyCastlingRights
      to-equal Kkq (fn (bd1, pos0-3, Kkq))
      to-equal 'kq' (fn (bd3, gen-pos (7, 4), Kkq))
    )

    t 'test gs.move' (->
      fn = gs.move
      to-equal bd6 (fn (bd5, pos0-4, no-pass) (gen-pos 0, 2))
      to-equal bd7 (fn (bd5, pos0-4, no-pass) (gen-pos 0, 6))
      to-equal bd8 (fn (bd5, pos7-4, no-pass) (gen-pos 7, 2))
      to-equal bd9 (fn (bd5, pos7-4, no-pass) pos7-6)
      to-equal bd11 (fn (bd10, (gen-pos 4, 0), pos5-1) pos5-1)
      to-equal bd12 (fn (bd10, (gen-pos 3, 7), pos2-6) pos2-6)
    )

    t 'test gs.move-legal?' (->
      fn = gs.move-legal?

      move-legal? = \src \tgt -> fn (bd1, src, no-rts, no-pass) tgt

      to-be-true  (move-legal? pos1-4 pos3-4)
      to-be-false (move-legal? pos1-4 pos2-3)
      to-be-true  (move-legal? pos7-1 pos5-2)
      to-be-false (move-legal? pos0-3 pos7-3)

      to-be-true  (fn (bd2, pos0-3, no-rts, no-pass) pos7-3)
    )

    t 'test gs.setPassantPosition' (->
      fn = gs.setPassantPosition

      to-unset = to-equal no-pass

      to-unset (fn (bd1, pos1-4, pos2-4))

      # Note: Here the source and target are identical.
      to-unset (fn (bd2, pos0-3, pos0-3))

      to-equal pos2-4 (fn (bd1, pos1-4, pos3-4))
      to-equal (gen-pos 5, 7) (fn (bd1, (gen-pos 6, 7), (gen-pos 4, 7)))

    )

    t 'test setPromotionPosition' (->
      fn = gs.setPromotionPosition

      to-unset = to-equal c.unset-promotion-pos

      to-unset (fn (bd1, pos1-4, pos2-4))

      # Note: Here the source and target are identical.
      to-unset (fn (bd2, pos0-3, pos0-3))

      to-equal pos0-0 (fn bd4, (gen-pos 1, 0), pos0-0)
      to-equal pos7-1 (fn bd4, (gen-pos 6, 0), pos7-1)

    )

    t 'test gs.vulnerable-positions-for' (->
      fn = gs.vulnerable-positions-for

      to-equal [gen-pos (7, 1)] (fn (bd4, no-rts, c.white))

      res2 = [gen-pos (0, 1), gen-pos (6, 3), gen-pos (5, 2), gen-pos (5, 0)]
      to-equal res2 (fn (bd4, no-rts, c.black))

      pos-w/-rank-7 = \file -> gen-pos (7, file)
      pos-w/-file-2 = \rank -> gen-pos (rank, 2)

      res3 = [
        gen-pos (1, 7)
        gen-pos (1, 6)
        gen-pos (0, 6)

        gen-pos (7, 3)
        gen-pos (7, 4)
        gen-pos (7, 5)
        gen-pos (7, 6)
        gen-pos (7, 7)

        gen-pos (7, 1)
        gen-pos (7, 0)

        gen-pos (6, 2)
        gen-pos (5, 2)
        gen-pos (4, 2)
        gen-pos (3, 2)
        gen-pos (2, 2)
        gen-pos (1, 2)
        gen-pos (0, 2)
      ]

      to-equal res3 (fn (bd13, no-rts, c.white))

    )

  )

)
