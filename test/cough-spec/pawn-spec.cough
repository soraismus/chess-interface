define ([
  'mydash'
  'jFns'
  'specConstants'
  'constants'
  'constructors'
  'pawn'
], (_, j, sc, c, g, p) ->

  {
    descr
    xdescr
    t
    xt
    test-spec
    to-throw
    to-be
    to-equal
    to-be-true
    to-be-false
    satisfies
    contravenes
    throws
    each-fn-result-equals
    each-satisfies
    each-contravenes
    each-throws
    to-be-array
    to-be-fn
    to-be-nbr
    to-be-array
    to-have-length
    test-predicate
    test-transformation
    test-throwing-transformation
    gen-pred-guards
  } = j

  descr 'test pawn.cough' (->

    bd               = sc.boards[0]
    chart1           = sc.charts[0]
    chart2           = sc.charts[1]

    chart2_1         = sc.chart2s[0]
    ctx              = sc.contexts[0]
    map              = sc.maps[0]
    passant          = sc.passant-positions[0]
    path             = sc.paths[0]
    pos1             = sc.positions[0]
    pos2             = sc.positions[1]
    initial-board    = sc.initial-board
    invalid-chessman = sc.invalid-chessmen[0]
    invalid-pos      = sc.invalid-positions[0]
    rts              = sc.castling-rights[0]
    setting          = sc.settings[0]
    src              = sc.positions[0]
    tgt              = sc.positions[1]

    t 'test p.basicMove' (->
      fn = p.basicMove
      result =
        'rnbqkbnrppppp-pp--------------------------------PPPPPPPPRNBQKpNR'
      to-equal result (fn chart2_1 pos2)

      chart2_2 = sc.chart2s[3]
      tgt2 = sc.positions[4]
      res2 = 'rnbqkbnr-ppppppp-------------------------p------P-PPPPPPRNBQKBNR'
      to-equal res2 (fn chart2_2 tgt2)
    )

    descr 'p.getPotentialMoves' (->
      fn = p.getPotentialMoves

      t 'when a pawn is on its home rank' (->
        local-chart1 = g.generate-chart2
          board  : initial-board
          source : g.generate-position (1, 4)
          castlingRights  : c.no-castling-rts
          passantPosition : c.unset-passant-pos

        potential-mvs1 = [
          g.generate-position (2, 4)
          g.generate-position (3, 4)
        ]

        to-equal potential-mvs1 (fn local-chart1)
      )

      t 'when a pawn is not on its home rank' (->
        bd2 = 'rnbqkbnrpppp-ppp------------p------P------------PPP-PPPPRNBQKBNR'
        local-chart2 = g.generate-chart2
          board  : bd2
          source : g.generate-position (3, 4)
          castlingRights  : c.no-castling-rts
          passantPosition : c.unset-passant-pos

        potential-mvs2 = [
          g.generate-position (4, 4)
          g.generate-position (4, 3)
        ]

        to-equal potential-mvs2 (fn local-chart2)
      )

      t 'when the "passantPosition" field is set' (->
        bd3 = 'rnbqkbnrpppp-ppp-------------------Pp-----------PPP-PPPPRNBQKBNR'
        local-chart3 = g.generate-chart2
          board  : bd3
          source : g.generate-position (4, 4)
          castlingRights  : c.no-castling-rts
          passantPosition : g.generate-position (5, 3)

        potential-mvs3 = [
          g.generate-position (5, 4)
          g.generate-position (5, 3)
        ]

        to-equal potential-mvs3 (fn local-chart3)
      )

    )

    t 'test p.modifyCastlingRights' (->
      fn = p.modifyCastlingRights
      chart3 = sc.chart2s[0]
      chart4 = sc.chart2s[2]
      to-equal c.full-castling-rts (fn chart3)
      to-equal c.no-castling-rts (fn chart4)
    )

    t 'test p.setPassantPosition' (->
      fn = p.setPassantPosition

      src              = g.generate-position (1, 4)
      tgt              = g.generate-position (3, 4)
      tgt2 = expected-passant = g.generate-position (2, 4)

      local-chart2 = g.generate-chart2
        board  : initial-board
        source : src
        castlingRights  : c.no-castling-rts
        passantPosition : c.unset-passant-pos

      to-equal expected-passant (fn (local-chart2, tgt))

      to-equal c.unset-passant-pos (fn (local-chart2, tgt2))

    )

    descr 'p.setPromotionPosition' (->
      fn = p.setPromotionPosition

      t 'when a pawn reaches the home rank of its opponents' (->
        local-board =
          'rnbqkbnr-ppppppp--------------------------------pPPPPPPPRNBQKBN-'

        tgt = g.generate-position (7, 0)
        local-chart1 = g.generate-chart2
          board  : local-board
          source : g.generate-position (6, 0)
          castlingRights  : c.no-castling-rts
          passantPosition : c.unset-passant-pos

        to-equal tgt (fn (local-chart1, tgt))
      )

      t 'when a pawn does not reach its opponents\' home rank' (->
        local-board =
          'rnbqkbnr-ppppppp-------------------------p-------PPPPPPPRNBQKBN-'

        tgt = g.generate-position (6, 0)

        local-chart1 = g.generate-chart2
          board  : local-board
          source : g.generate-position (5, 0)
          castlingRights  : c.no-castling-rts
          passantPosition : c.unset-passant-pos

        to-equal c.unset-promotion-pos (fn (local-chart1, tgt))
      )

    )

  )

)
