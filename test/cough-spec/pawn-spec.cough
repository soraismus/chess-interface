define ([
  'mydash'
  'jFns'
  'specConstants'
  'constants'
  'constructors'
  'pawn'
], (_, j, sc, c, g, p) ->

  {
    descr
    xdescr
    t
    xt
    test-spec
    to-throw
    to-be
    to-equal
    to-be-true
    to-be-false
    satisfies
    contravenes
    throws
    each-fn-result-equals
    each-satisfies
    each-contravenes
    each-throws
    to-be-array
    to-be-fn
    to-be-nbr
    to-be-array
    to-have-length
    test-predicate
    test-transformation
    test-throwing-transformation
    gen-pred-guards
  } = j

  descr 'test pawn.cough' (->

    gen-pos = g.generate-position

    initial-board = sc.initial-board

    t 'test p.getPotentialKingAttacks2' (->
      fn = p.getPotentialKingAttacks2

      local-pos = gen-pos (1, 1)

      bd1 = '---------p------------------------------------------------------'
      res1 = [gen-pos (2, 0), gen-pos (2, 2)]
      to-equal res1 (fn (bd1, local-pos))

      bd2 = '---------P------------------------------------------------------'
      res2 = [gen-pos (0, 0), gen-pos (0, 2)]
      to-equal res2 (fn (bd2, local-pos))
    )

    descr 'p.getPotentialMoves2' (->
      fn = p.getPotentialMoves2

      t 'when a pawn is on its home rank' (->
        local-bd = initial-board
        local-pos = gen-pos (1, 4)

        potential-mvs1 = [gen-pos (2, 4), gen-pos (3, 4)]

        to-equal potential-mvs1 (fn (
          local-bd, local-pos, undefined, c.unset-passant-pos))
      )

      t 'when a pawn is not on its home rank' (->
        bd2 =
          'rnbqkbnrpppp-ppp------------p------P------------PPP-PPPPRNBQKBNR'

        local-pos = gen-pos (3, 4)

        potential-mvs2 = [gen-pos (4, 4), gen-pos (4, 3)]

        to-equal potential-mvs2 (fn (
          bd2, local-pos, undefined, c.unset-passant-pos))
      )

      t 'when the "passantPosition" field is set' (->
        bd3 =
          'rnbqkbnrpppp-ppp-------------------Pp-----------PPP-PPPPRNBQKBNR'

        local-pos = gen-pos (4, 4)

        potential-mvs3 = [gen-pos (5, 4), gen-pos (5, 3)]

        to-equal potential-mvs3 (fn (
          bd3, local-pos, undefined, gen-pos (5, 3)))
      )

    )

    t 'test p.modifyCastlingRights2' (->
      fn = p.modifyCastlingRights2
      to-equal c.full-castling-rts (fn c.full-castling-rts)
      to-equal c.no-castling-rts (fn c.no-castling-rts)
    )

    t 'test p.move2' (->
      fn = p.move2
      result =
        'rnbqkbnrppppp-pp--------------------------------PPPPPPPPRNBQKpNR'
      src1 = gen-pos (1, 5)
      tgt1 = gen-pos (7, 5)
      to-equal result (fn (
        initial-board, src1, undefined, c.unset-passant-pos) tgt1)

      bd2 = 'rnbqkbnr-ppppppp----------------pP--------------P-PPPPPPRNBQKBNR'
      src2 = gen-pos (4, 0)
      tgt2 = gen-pos (5, 1)
      res2 = 'rnbqkbnr-ppppppp-------------------------p------P-PPPPPPRNBQKBNR'
      to-equal res2 (fn (bd2, src2, undefined, tgt2) tgt2)
    )

    t 'test p.setPassantPosition2' (->
      fn = p.setPassantPosition2

      src              = gen-pos (1, 4)
      tgt              = gen-pos (3, 4)
      tgt2 = expected-passant = gen-pos (2, 4)

      to-equal expected-passant (fn (c.black, src, tgt))
      to-equal c.unset-passant-pos (fn (c.black, src, tgt2))

    )

    descr 'p.setPromotionPosition2' (->
      fn = p.setPromotionPosition2

      t 'when a pawn reaches the home rank of its opponents' (->
        tgt = gen-pos (7, 0)
        to-equal tgt (fn (c.black, tgt))
      )

      t 'when a pawn does not reach its opponents\' home rank' (->
        tgt = gen-pos (6, 0)
        to-equal c.unset-promotion-pos (fn (c.black, tgt))
      )

    )

  )

)
