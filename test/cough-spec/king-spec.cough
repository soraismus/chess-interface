define ([
  'jFns'
  'constants'
  'constructors'
  'utilities'
  'king'
], (j, c, g, u, k) ->

  {
    descr
    xdescr
    t
    xt
    test-spec
    to-throw
    to-be
    to-equal
    to-be-true
    to-be-false
    satisfies
    contravenes
    throws
    each-fn-result-equals
    each-satisfies
    each-contravenes
    each-throws
    to-be-array
    to-be-fn
    to-be-nbr
    to-be-array
    to-have-length
    test-predicate
    test-transformation
    test-throwing-transformation
    gen-pred-guards
  } = j

  descr 'test king.cough' (->

    gen-pos = g.generate-position

    bd4 = '----kb-----Np---------------------------------------------------'

    pos3 = g.generate-position (0, 4)

    t 'test k.getPotentialKingAttacks' (->
      fn = k.getPotentialKingAttacks
      res = [
        gen-pos (1, 5)
        gen-pos (1, 3)
        gen-pos (0, 3)
      ]
      to-equal res (fn (bd4, gen-pos (0, 4), c.no-castling-rts))
    )

    t 'test k.getPotentialMoves' (->
      fn = k.getPotentialMoves

      bd3 = '----k-----------------------------------------------------------'
      
      results3 = [[1, 5], [1, 4], [1, 3], [0, 5], [0, 3]]
      to-equal results3 (fn (bd3, pos3, c.no-castling-rts))

      results4 = [[1, 5], [1, 3], [0, 3]]
      to-equal results4 (fn (bd4, pos3, c.no-castling-rts))

      results5 = [[1, 5], [1, 4], [1, 3], [0, 5], [0, 3], [0, 2], [0, 6]]
      to-equal results5 (fn (bd3, pos3, c.full-castling-rts))

    )

    t 'test k.modifyCastlingRights' (->
      fn = k.modifyCastlingRights
      to-equal 'KQ' (fn (c.full-castling-rts, pos3))
      to-equal c.no-castling-rts (fn ('KQ', g.generate-position (7, 4)))
    )

    t 'test k.move' (->
      fn = k.move
      bd1 = 'r---k-----------------------------------------------------------'
      res1 = '--kr------------------------------------------------------------'
      to-equal res1 (fn (bd1, pos3) (gen-pos (0, 2)))

      bd2 = 'r---k--r--------------------------------------------------------'
      res2 = 'r----rk---------------------------------------------------------'
      to-equal res2 (fn (bd2, pos3) (gen-pos (0, 6)))

      bd5 = '------------------------------------------------------------K--R'
      res5 = '-------------------------------------------------------------RK-'
      to-equal res5 (fn (bd5, gen-pos (7, 4)) (gen-pos (7, 6)))
    )

    t 'test k.setPassantPosition' (->
      fn = k.setPassantPosition
      to-equal c.unset-passant-pos (fn ())
    )

    t 'test k.setPromotionPosition' (->
      fn = k.setPromotionPosition
      to-equal c.unset-promotion-pos (fn ())
    )

  )

)
