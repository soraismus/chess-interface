define ([
  'mydash'
  'jFns'
  'constants'
  'constructors'
  'utilities'
  'stepper'
], (_, j, c, g, u, st) ->

  {
    descr
    xdescr
    t
    xt
    test-spec
    to-throw
    to-be
    to-equal
    to-be-true
    to-be-false
    satisfies
    contravenes
    throws
    each-fn-result-equals
    each-satisfies
    each-contravenes
    each-throws
    to-be-array
    to-be-fn
    to-be-nbr
    to-be-array
    to-have-length
    test-predicate
    test-transformation
    test-throwing-transformation
    gen-pred-guards
  } = j

  descr 'test stepper.cough' (->

    t 'test st.getPotentialMoves' (->
      fn = st.getPotentialMoves

      local-pos = g.generate-position (3, 3)

      bd1 = '---------------------------n------------------------------------'

      potential-moves = [
        [4, 5], [4, 1], [2, 5], [2, 1]
        [5, 4], [5, 2], [1, 4], [1, 2]
      ]

      to-equal potential-moves (fn (
        bd1, local-pos, undefined, undefined, c.knight))

      bd2 = '----------p-p----p---p-----n------------------------------------'
      potential-moves2 = [[4, 5], [4, 1], [5, 4], [5, 2]]
      to-equal potential-moves2 (fn (
        bd2, local-pos, undefined, undefined, c.knight))

      bd3 = '---------------------------K------------------------------------'

      potential-moves3 = [
        [4, 4], [4, 3], [4, 2]
        [3, 4],         [3, 2]
        [2, 4], [2, 3], [2, 2]
      ]

      to-equal potential-moves3 (fn (
        bd3, local-pos, undefined, undefined, c.king))

    )

  )

)
