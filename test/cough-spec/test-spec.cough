define ([
  'mydash'
  'jFns'
  'constants'
  'types'
  'extractors'
  'assertions'
], (_, j, c, y, x, v) ->

  {
    descr
    xdescr
    t
    xt
    test-spec
    to-throw
    to-be
    to-equal
    to-be-true
    to-be-false
    satisfies
    contravenes
    throws
    each-satisfies
    each-contravenes
    each-throws
    to-be-fn
    test-predicate
    test-transformation
    test-throwing-transformation
    gen-pred-guards
    implement-specs
    implement-specs2
    implement-specs3
  } = j
  
  describe ('test description', ->
    it ('test spec', ->
      expect(5).toEqual(5)
    )
  )

  descr 'test description2' (->
    t 'test spec' (->
      to-equal (5) (5)
    )
  )

  descr  'test constants.cough' (->
    t 'test c.bishop' (->
      to-equal ('bishop') c.bishop
    )

    t 'test c.empty-square' (->
      to-equal ('-') c.empty-square
    )

  )

  descr 'test types.cough' (->
    t 'test y.empty?' (->
      satisfies y.empty? c.empty-square
    )

    t 'test y.color?' (->
      satisfies y.color? ('w')
    )

    t 'test y.bounded?' (->
      satisfies y.bounded? 5
    )

  )

  descr 'test assertions.cough' (->
    t 'test v.vow-path' (->
      to-throw v.vow-path ([1, 2, 3])
    )
  )

  descr 'test extractors.cough' (->
    bd = '--------------------Q-------------------------------------------'
    rts = 'KQ'
    passant = '-'

    ctx = { board : bd, castlingRights : rts, passantPosition : passant }

    src = [2, 4]
    tgt = [5, 4]
    
    path = [tgt, src]

    chart = [ctx, path]

    t 'test v.vow-board' (->
      fn = v.vow-board
      to-throw fn ctx
      to-equal bd (fn bd)
    )

    t 'test v.vow-bounded' (->
      fn = v.vow-bounded
      to-throw fn 10
      to-equal (4) (fn 4)
    )

    t 'test v.castling-right' (->
      fn = v.vow-castling-right
      to-throw fn 'X'
      to-equal ('K') (fn 'K')
    )

    t 'test v.castling-righ-set' (->
      fn = v.vow-castling-right-set 
      to-throw fn 'KQxkq'
      to-equal ('KQk') (fn 'KQk')
    )

    t 'test v.chart' (->
      fn = v.vow-chart
      to-throw fn bd
      to-equal chart (fn chart)
    )

    t 'test v.vow-chessman' (->
      fn = v.vow-chessman
      to-throw fn 'X'
      to-equal c.white-knight (fn c.white-knight)
    )

    t 'test v.vow-chessman-type' (->
      fn = v.vow-chessman-type 
      to-throw fn c.white-knight
      to-equal c.knight (fn c.knight)
    )

    t 'test v.vow-color' (->
      fn = v.vow-color
      to-throw fn 'x'
      to-equal c.white (fn c.white)
    )

    t 'test v.vow-color-pair' (->
      fn = v.vow-color-pair
      to-throw fn ['x', c.white]

      color-pair = [c.white, c.black]
      to-equal color-pair (fn color-pair)
    )

    t 'test v.vow-context' (->
      fn = v.vow-context
      to-throw fn bd
      to-equal ctx (fn ctx)
    )

    t 'test v.vow-index' (->
      fn = v.vow-index
      to-throw fn 100
      to-equal 62 (fn 62)
    )

    setting = [bd, src]

    #console.log (x.square-at.toString())
  )

)
