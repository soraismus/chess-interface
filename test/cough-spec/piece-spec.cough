define ([
  'mydash'
  'jFns'
  'specConstants'
  'constants'
  'constructors'
  'piece'
], (_, j, sc, c, g, p) ->

  {
    descr
    xdescr
    t
    xt
    test-spec
    to-throw
    to-be
    to-equal
    to-be-true
    to-be-false
    satisfies
    contravenes
    throws
    each-fn-result-equals
    each-satisfies
    each-contravenes
    each-throws
    to-be-array
    to-be-fn
    to-be-nbr
    to-be-array
    to-have-length
    test-predicate
    test-transformation
    test-throwing-transformation
    gen-pred-guards
  } = j

  descr 'test piece.cough' (->

    gen-pos = g.generate-position

    initial-board = sc.initial-board

    t 'test p.basicMove' (->
      fn = p.basicMove
      src = gen-pos (1, 5)
      tgt = gen-pos (7, 5)
      res = 'rnbqkbnrppppp-pp--------------------------------PPPPPPPPRNBQKpNR'
      to-equal res (fn (initial-board, src) tgt)
    )

    t 'test p.modifyCastlingRights' (->
      fn = p.modifyCastlingRights
      to-equal c.full-castling-rts (fn c.full-castling-rts)
      to-equal c.no-castling-rts (fn c.no-castling-rts)
    )

    t 'test p.setPassantPosition' (->
      fn = p.setPassantPosition
      to-equal c.unset-passant-pos (fn ())
    )

    t 'test p.setPromotionPosition' (->
      fn = p.setPromotionPosition
      to-equal c.unset-promotion-pos (fn ())
    )

  )

)
