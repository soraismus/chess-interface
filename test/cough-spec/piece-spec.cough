define ([
  'mydash'
  'jFns'
  'specConstants'
  'constants'
  'piece'
], (_, j, sc, c, p) ->

  {
    descr
    xdescr
    t
    xt
    test-spec
    to-throw
    to-be
    to-equal
    to-be-true
    to-be-false
    satisfies
    contravenes
    throws
    each-fn-result-equals
    each-satisfies
    each-contravenes
    each-throws
    to-be-array
    to-be-fn
    to-be-nbr
    to-be-array
    to-have-length
    test-predicate
    test-transformation
    test-throwing-transformation
    gen-pred-guards
  } = j

  descr 'test piece.cough' (->

    bd               = sc.boards[0]
    chart1           = sc.charts[0]
    chart2           = sc.charts[1]

    chart2_1         = sc.chart2s[0]
    ctx              = sc.contexts[0]
    map              = sc.maps[0]
    passant          = sc.passant-positions[0]
    path             = sc.paths[0]
    pos1             = sc.positions[0]
    pos2             = sc.positions[1]
    initial-board    = sc.initial-board
    invalid-chessman = sc.invalid-chessmen[0]
    invalid-pos      = sc.invalid-positions[0]
    rts              = sc.castling-rights[0]
    setting          = sc.settings[0]
    src              = sc.positions[0]
    tgt              = sc.positions[1]

    t 'test p.basicMove' (->
      fn = p.basicMove
      result =
        'rnbqkbnrppppp-pp--------------------------------PPPPPPPPRNBQKpNR'
      to-equal result (fn chart2_1 pos2)
    )

    t 'test p.modifyCastlingRights' (->
      fn = p.modifyCastlingRights
      chart3 = sc.chart2s[0]
      chart4 = sc.chart2s[2]
      to-equal c.full-castling-rts (fn chart3)
      to-equal c.no-castling-rts (fn chart4)
    )

    t 'test p.setPassantPosition' (->
      fn = p.setPassantPosition
      to-equal c.unset-passant-pos (fn chart2_1)
    )

    t 'test p.setPromotionPosition' (->
      fn = p.setPromotionPosition
      to-equal c.unset-promotion-position (fn chart2_1)
    )

  )

)
